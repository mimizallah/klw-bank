{"version":3,"sources":["containers/navs/Breadcrumb.js","components/wizard/BottomNavigation.js","components/wizard/TopNavigation.js","containers/wizard/Basic.js","containers/wizard/LastStepEnd.js","containers/wizard/TopNavDisabled.js","containers/wizard/Validation.js","containers/wizard/Layouts.js","views/app/ui/forms/wizard.js"],"names":["getMenuTitle","sub","concat","adminRoot","_jsx","IntlMessages","id","getUrl","path","split","BreadcrumbItems","_ref2","match","substr","paths","length","indexOf","filter","x","_Fragment","children","Breadcrumb","className","map","index","BreadcrumbItem","active","NavLink","to","BreadcrumbContainer","_ref","heading","_jsxs","style","marginBottom","BottomNavigation","onClickPrev","prevLabel","onClickNext","nextLabel","WithWizard","render","next","previous","step","steps","Button","color","onClick","TopNavigation","disableNav","topNavClick","getClassName","stepItem","isDone","push","go","hideTopNav","location","itemClick","name","desc","injectIntl","intl","_useState","useState","_useState2","_slicedToArray","setName","_useState3","_useState4","email","setEmail","_useState5","_useState6","password","setPassword","messages","Card","CardBody","Wizard","Steps","Step","Form","FormGroup","Label","Input","type","placeholder","value","onChange","e","target","goToNext","goToPrev","_useState7","_useState8","bottomNavHidden","setBottomNavHidden","_useState9","_useState10","topNavDisabled","setTopNavDisabled","validateEmail","error","test","validateName","validatePassword","forms","createRef","loading","setLoading","valid","fields","setFields","Formik","innerRef","initialValues","onSubmit","errors","touched","Field","validate","_ref3","_ref4","Spinner","formIndex","form","current","submitForm","then","newFields","_toConsumableArray","values","setTimeout","Row","Colxx","xxs","xl","FormWizard","Separator","Basic","LastStepEnd","TopNavDisabled","Validation","Layouts"],"mappings":"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","file":"static/js/forms-wizard.3b0adc05.chunk.js","sourcesContent":["/* eslint-disable react/no-array-index-key */\nimport React from 'react';\nimport { Breadcrumb, BreadcrumbItem } from 'reactstrap';\nimport { NavLink } from 'react-router-dom';\nimport IntlMessages from '../../helpers/IntlMessages';\nimport { adminRoot } from '../../constants/defaultValues';\n\nconst getMenuTitle = (sub) => {\n  if (`/${sub}` === adminRoot) return <IntlMessages id=\"menu.home\" />;\n  return <IntlMessages id={`menu.${sub}`} />;\n};\n\nconst getUrl = (path, sub) => {\n  return path.split(sub)[0] + sub;\n};\n\nconst BreadcrumbContainer = ({ heading, match }) => {\n  return (\n    <>\n      {heading && (\n        <h1 style={{ marginBottom: '0rem' }}>\n          <IntlMessages id={heading} />\n        </h1>\n      )}\n      <BreadcrumbItems match={match} />\n    </>\n  );\n};\n\nconst BreadcrumbItems = ({ match }) => {\n  const path = match.path.substr(1);\n  let paths = path.split('/');\n  if (paths[paths.length - 1].indexOf(':') > -1) {\n    paths = paths.filter((x) => x.indexOf(':') === -1);\n  }\n  return (\n    <>\n      <Breadcrumb className=\"pt-0 breadcrumb-container d-none d-sm-block d-lg-inline-block\">\n        {paths.map((sub, index) => {\n          return (\n            <BreadcrumbItem key={index} active={paths.length === index + 1}>\n              {paths.length !== index + 1 ? (\n                <NavLink to={`/${getUrl(path, sub, index)}`}>\n                  {getMenuTitle(sub)}\n                </NavLink>\n              ) : (\n                getMenuTitle(sub)\n              )}\n            </BreadcrumbItem>\n          );\n        })}\n      </Breadcrumb>\n    </>\n  );\n};\n\nexport default BreadcrumbContainer;\n","/* eslint-disable react/no-array-index-key */\n/* eslint-disable no-unused-vars */\n/* eslint-disable no-param-reassign */\nimport React from 'react';\nimport { WithWizard } from 'react-albus';\nimport { Button } from 'reactstrap';\n\nconst BottomNavigation = ({\n  className,\n  onClickPrev,\n  prevLabel,\n  onClickNext,\n  nextLabel,\n}) => {\n  return (\n    <WithWizard\n      render={({ next, previous, step, steps }) => (\n        <div className={`wizard-buttons ${className}`}>\n          <Button\n            color=\"primary\"\n            className={`mr-1 ${steps.indexOf(step) <= 0 ? 'disabled' : ''}`}\n            onClick={() => {\n              onClickPrev(previous, steps, step);\n            }}\n          >\n            {prevLabel}\n          </Button>\n\n          <Button\n            color=\"primary\"\n            className={\n              steps.indexOf(step) >= steps.length - 1 ? 'disabled' : ''\n            }\n            onClick={() => {\n              onClickNext(next, steps, step);\n            }}\n          >\n            {nextLabel}\n          </Button>\n        </div>\n      )}\n    />\n  );\n};\nexport default BottomNavigation;\n","import React from 'react';\nimport { WithWizard } from 'react-albus';\nimport { NavLink } from 'react-router-dom';\n\nconst TopNavigation = ({ className, disableNav, topNavClick }) => {\n  const getClassName = (steps, step, index, stepItem) => {\n    if (steps.indexOf(step) === index) {\n      return 'step-doing';\n    }\n    if (steps.indexOf(step) > index || stepItem.isDone) {\n      stepItem.isDone = true;\n      return 'step-done';\n    }\n    return 'step';\n  };\n\n  const itemClick = (stepItem, push) => {\n    if (disableNav) {\n      return;\n    }\n    topNavClick(stepItem, push);\n  };\n\n  return (\n    <WithWizard\n      render={({ next, previous, step, steps, go, push }) => (\n        <ul\n          className={`nav nav-tabs ${className}${\n            disableNav ? ' disabled' : ''\n          }`}\n        >\n          {steps.map((stepItem, index) => {\n            if (!stepItem.hideTopNav) {\n              return (\n                <li\n                  key={`topNavStep_${index}`}\n                  className={`nav-item ${getClassName(\n                    steps,\n                    step,\n                    index,\n                    stepItem\n                  )}`}\n                >\n                  <NavLink\n                    to=\"#\"\n                    location={{}}\n                    className=\"nav-link\"\n                    onClick={() => itemClick(stepItem, push)}\n                  >\n                    <span>{stepItem.name}</span>\n                    <small>{stepItem.desc}</small>\n                  </NavLink>\n                </li>\n              );\n            }\n            return <span key={`topNavStep_${index}`} />;\n          })}\n        </ul>\n      )}\n    />\n  );\n};\n\nexport default TopNavigation;\n","/* eslint-disable no-param-reassign */\nimport React, { useState } from 'react';\nimport { Card, CardBody, Form, FormGroup, Input, Label } from 'reactstrap';\nimport { Wizard, Steps, Step } from 'react-albus';\nimport { injectIntl } from 'react-intl';\nimport IntlMessages from '../../helpers/IntlMessages';\nimport BottomNavigation from '../../components/wizard/BottomNavigation';\nimport TopNavigation from '../../components/wizard/TopNavigation';\n\nconst Basic = ({ intl }) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n\n  const topNavClick = (stepItem, push) => {\n    push(stepItem.id);\n  };\n\n  const onClickNext = (goToNext, steps, step) => {\n    step.isDone = true;\n    if (steps.length - 1 <= steps.indexOf(step)) {\n      return;\n    }\n    goToNext();\n  };\n\n  const onClickPrev = (goToPrev, steps, step) => {\n    if (steps.indexOf(step) <= 0) {\n      return;\n    }\n    goToPrev();\n  };\n\n  const { messages } = intl;\n  return (\n    <Card>\n      <CardBody className=\"wizard wizard-default\">\n        <Wizard>\n          <TopNavigation\n            className=\"justify-content-center\"\n            disableNav={false}\n            topNavClick={topNavClick}\n          />\n          <Steps>\n            <Step\n              id=\"step1\"\n              name={messages['wizard.step-name-1']}\n              desc={messages['wizard.step-desc-1']}\n            >\n              <div className=\"wizard-basic-step\">\n                <Form>\n                  <FormGroup>\n                    <Label>\n                      <IntlMessages id=\"forms.name\" />\n                    </Label>\n                    <Input\n                      type=\"text\"\n                      name=\"name\"\n                      placeholder={messages['forms.name']}\n                      value={name}\n                      onChange={(e) => setName(e.target.value)}\n                    />\n                  </FormGroup>\n                </Form>\n              </div>\n            </Step>\n            <Step\n              id=\"step2\"\n              name={messages['wizard.step-name-2']}\n              desc={messages['wizard.step-desc-2']}\n            >\n              <div className=\"wizard-basic-step\">\n                <Form>\n                  <FormGroup>\n                    <Label>\n                      <IntlMessages id=\"forms.email\" />\n                    </Label>\n                    <Input\n                      type=\"email\"\n                      name=\"email\"\n                      placeholder={messages['forms.email']}\n                      value={email}\n                      onChange={(e) => setEmail(e.target.value)}\n                    />\n                  </FormGroup>\n                </Form>\n              </div>\n            </Step>\n            <Step\n              id=\"step3\"\n              name={messages['wizard.step-name-3']}\n              desc={messages['wizard.step-desc-3']}\n            >\n              <div className=\"wizard-basic-step\">\n                <Form>\n                  <FormGroup>\n                    <Label>\n                      <IntlMessages id=\"forms.password\" />\n                    </Label>\n                    <Input\n                      type=\"password\"\n                      name=\"password\"\n                      placeholder={messages['forms.password']}\n                      value={password}\n                      onChange={(e) => setPassword(e.target.value)}\n                    />\n                  </FormGroup>\n                </Form>\n              </div>\n            </Step>\n            <Step id=\"step4\" hideTopNav>\n              <div className=\"wizard-basic-step text-center\">\n                <h2 className=\"mb-2\">\n                  <IntlMessages id=\"wizard.content-thanks\" />\n                </h2>\n                <p>\n                  <IntlMessages id=\"wizard.registered\" />\n                </p>\n              </div>\n            </Step>\n          </Steps>\n          <BottomNavigation\n            onClickNext={onClickNext}\n            onClickPrev={onClickPrev}\n            className=\"justify-content-center\"\n            prevLabel={messages['wizard.prev']}\n            nextLabel={messages['wizard.next']}\n          />\n        </Wizard>\n      </CardBody>\n    </Card>\n  );\n};\nexport default injectIntl(Basic);\n","/* eslint-disable no-param-reassign */\nimport React, { useState } from 'react';\nimport { Card, CardBody, Form, FormGroup, Input, Label } from 'reactstrap';\nimport { Wizard, Steps, Step } from 'react-albus';\nimport { injectIntl } from 'react-intl';\nimport IntlMessages from '../../helpers/IntlMessages';\nimport BottomNavigation from '../../components/wizard/BottomNavigation';\nimport TopNavigation from '../../components/wizard/TopNavigation';\n\nconst LastStepEnd = ({ intl }) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [bottomNavHidden, setBottomNavHidden] = useState(false);\n  const [topNavDisabled, setTopNavDisabled] = useState(false);\n\n  const topNavClick = (stepItem, push) => {\n    if (topNavDisabled) {\n      return;\n    }\n    push(stepItem.id);\n  };\n\n  const onClickNext = (goToNext, steps, step) => {\n    step.isDone = true;\n    if (steps.length - 2 <= steps.indexOf(step)) {\n      setBottomNavHidden(true);\n      setTopNavDisabled(true);\n    }\n    if (steps.length - 1 <= steps.indexOf(step)) {\n      return;\n    }\n    goToNext();\n  };\n\n  const onClickPrev = (goToPrev, steps, step) => {\n    if (steps.indexOf(step) <= 0) {\n      return;\n    }\n    goToPrev();\n  };\n\n  const { messages } = intl;\n  return (\n    <Card>\n      <CardBody className=\"wizard wizard-default\">\n        <Wizard>\n          <TopNavigation\n            className=\"justify-content-center\"\n            disableNav={false}\n            topNavClick={topNavClick}\n          />\n          <Steps>\n            <Step\n              id=\"step1\"\n              name={messages['wizard.step-name-1']}\n              desc={messages['wizard.step-desc-1']}\n            >\n              <div className=\"wizard-basic-step\">\n                <Form>\n                  <FormGroup>\n                    <Label>\n                      <IntlMessages id=\"forms.name\" />\n                    </Label>\n                    <Input\n                      type=\"text\"\n                      name=\"name\"\n                      placeholder={messages['forms.name']}\n                      value={name}\n                      onChange={(e) => setName(e.target.value)}\n                    />\n                  </FormGroup>\n                </Form>\n              </div>\n            </Step>\n            <Step\n              id=\"step2\"\n              name={messages['wizard.step-name-2']}\n              desc={messages['wizard.step-desc-2']}\n            >\n              <div className=\"wizard-basic-step\">\n                <Form>\n                  <FormGroup>\n                    <Label>\n                      <IntlMessages id=\"forms.email\" />\n                    </Label>\n                    <Input\n                      type=\"email\"\n                      name=\"email\"\n                      placeholder={messages['forms.email']}\n                      value={email}\n                      onChange={(e) => setEmail(e.target.value)}\n                    />\n                  </FormGroup>\n                </Form>\n              </div>\n            </Step>\n            <Step\n              id=\"step3\"\n              name={messages['wizard.step-name-3']}\n              desc={messages['wizard.step-desc-3']}\n            >\n              <div className=\"wizard-basic-step\">\n                <Form>\n                  <FormGroup>\n                    <Label>\n                      <IntlMessages id=\"forms.password\" />\n                    </Label>\n                    <Input\n                      type=\"password\"\n                      name=\"password\"\n                      placeholder={messages['forms.password']}\n                      value={password}\n                      onChange={(e) => setPassword(e.target.value)}\n                    />\n                  </FormGroup>\n                </Form>\n              </div>\n            </Step>\n            <Step id=\"step4\" hideTopNav>\n              <div className=\"wizard-basic-step text-center\">\n                <h2 className=\"mb-2\">\n                  <IntlMessages id=\"wizard.content-thanks\" />\n                </h2>\n                <p>\n                  <IntlMessages id=\"wizard.registered\" />\n                </p>\n              </div>\n            </Step>\n          </Steps>\n          <BottomNavigation\n            onClickNext={onClickNext}\n            onClickPrev={onClickPrev}\n            className={`justify-content-center ${\n              bottomNavHidden && 'invisible'\n            }`}\n            prevLabel={messages['wizard.prev']}\n            nextLabel={messages['wizard.next']}\n          />\n        </Wizard>\n      </CardBody>\n    </Card>\n  );\n};\nexport default injectIntl(LastStepEnd);\n","/* eslint-disable no-param-reassign */\nimport React, { useState } from 'react';\nimport { Card, CardBody, Form, FormGroup, Input, Label } from 'reactstrap';\nimport { Wizard, Steps, Step } from 'react-albus';\nimport { injectIntl } from 'react-intl';\nimport IntlMessages from '../../helpers/IntlMessages';\nimport BottomNavigation from '../../components/wizard/BottomNavigation';\nimport TopNavigation from '../../components/wizard/TopNavigation';\n\nconst TopNavDisabled = ({ intl }) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n\n  const topNavClick = (stepItem, push) => {\n    push(stepItem.id);\n  };\n\n  const onClickNext = (goToNext, steps, step) => {\n    step.isDone = true;\n    if (steps.length - 1 <= steps.indexOf(step)) {\n      return;\n    }\n    goToNext();\n  };\n\n  const onClickPrev = (goToPrev, steps, step) => {\n    if (steps.indexOf(step) <= 0) {\n      return;\n    }\n    goToPrev();\n  };\n\n  const { messages } = intl;\n  return (\n    <Card>\n      <CardBody className=\"wizard wizard-default\">\n        <Wizard>\n          <TopNavigation\n            className=\"justify-content-center\"\n            disableNav\n            topNavClick={topNavClick}\n          />\n          <Steps>\n            <Step\n              id=\"step1\"\n              name={messages['wizard.step-name-1']}\n              desc={messages['wizard.step-desc-1']}\n            >\n              <div className=\"wizard-basic-step\">\n                <Form>\n                  <FormGroup>\n                    <Label>\n                      <IntlMessages id=\"forms.name\" />\n                    </Label>\n                    <Input\n                      type=\"text\"\n                      name=\"name\"\n                      placeholder={messages['forms.name']}\n                      value={name}\n                      onChange={(e) => setName(e.target.value)}\n                    />\n                  </FormGroup>\n                </Form>\n              </div>\n            </Step>\n            <Step\n              id=\"step2\"\n              name={messages['wizard.step-name-2']}\n              desc={messages['wizard.step-desc-2']}\n            >\n              <div className=\"wizard-basic-step\">\n                <Form>\n                  <FormGroup>\n                    <Label>\n                      <IntlMessages id=\"forms.email\" />\n                    </Label>\n                    <Input\n                      type=\"email\"\n                      name=\"email\"\n                      placeholder={messages['forms.email']}\n                      value={email}\n                      onChange={(e) => setEmail(e.target.value)}\n                    />\n                  </FormGroup>\n                </Form>\n              </div>\n            </Step>\n            <Step\n              id=\"step3\"\n              name={messages['wizard.step-name-3']}\n              desc={messages['wizard.step-desc-3']}\n            >\n              <div className=\"wizard-basic-step\">\n                <Form>\n                  <FormGroup>\n                    <Label>\n                      <IntlMessages id=\"forms.password\" />\n                    </Label>\n                    <Input\n                      type=\"password\"\n                      name=\"password\"\n                      placeholder={messages['forms.password']}\n                      value={password}\n                      onChange={(e) => setPassword(e.target.value)}\n                    />\n                  </FormGroup>\n                </Form>\n              </div>\n            </Step>\n            <Step id=\"step4\" hideTopNav>\n              <div className=\"wizard-basic-step text-center\">\n                <h2 className=\"mb-2\">\n                  <IntlMessages id=\"wizard.content-thanks\" />\n                </h2>\n                <p>\n                  <IntlMessages id=\"wizard.registered\" />\n                </p>\n              </div>\n            </Step>\n          </Steps>\n          <BottomNavigation\n            onClickNext={onClickNext}\n            onClickPrev={onClickPrev}\n            className=\"justify-content-center\"\n            prevLabel={messages['wizard.prev']}\n            nextLabel={messages['wizard.next']}\n          />\n        </Wizard>\n      </CardBody>\n    </Card>\n  );\n};\n\nexport default injectIntl(TopNavDisabled);\n","/* eslint-disable no-param-reassign */\nimport React, { createRef, useState } from 'react';\nimport { Card, CardBody, FormGroup, Label, Spinner } from 'reactstrap';\nimport { Wizard, Steps, Step } from 'react-albus';\nimport { injectIntl } from 'react-intl';\nimport { Formik, Form, Field } from 'formik';\nimport IntlMessages from '../../helpers/IntlMessages';\nimport BottomNavigation from '../../components/wizard/BottomNavigation';\nimport TopNavigation from '../../components/wizard/TopNavigation';\n\nconst validateEmail = (value) => {\n  let error;\n  if (!value) {\n    error = 'Please enter your email address';\n  } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value)) {\n    error = 'Invalid email address';\n  }\n  return error;\n};\n\nconst validateName = (value) => {\n  let error;\n  if (!value) {\n    error = 'Please enter your name';\n  } else if (value.length < 2) {\n    error = 'Value must be longer than 2 characters';\n  }\n  return error;\n};\n\nconst validatePassword = (value) => {\n  let error;\n  if (!value) {\n    error = 'Please enter your password';\n  } else if (value.length < 6) {\n    error = 'Password must be longer than 6 characters';\n  }\n  return error;\n};\n\nconst Validation = ({ intl }) => {\n  const forms = [createRef(null), createRef(null), createRef(null)];\n  const [bottomNavHidden, setBottomNavHidden] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [fields, setFields] = useState([\n    {\n      valid: false,\n      name: 'name',\n      value: '',\n    },\n    {\n      valid: false,\n      name: 'email',\n      value: '',\n    },\n    {\n      valid: false,\n      name: 'password',\n      value: '',\n    },\n  ]);\n\n  const asyncLoading = () => {\n    setLoading(true);\n    setTimeout(() => {\n      setLoading(false);\n    }, 3000);\n  };\n\n  const onClickNext = (goToNext, steps, step) => {\n    if (steps.length - 1 <= steps.indexOf(step)) {\n      return;\n    }\n    const formIndex = steps.indexOf(step);\n    const form = forms[formIndex].current;\n    const { name } = fields[formIndex];\n    form.submitForm().then(() => {\n      const newFields = [...fields];\n\n      newFields[formIndex].value = form.values[name];\n      newFields[formIndex].valid = !form.errors[name];\n      setFields(newFields);\n\n      if (!form.errors[name] && form.touched[name]) {\n        goToNext();\n        step.isDone = true;\n        if (steps.length - 2 <= steps.indexOf(step)) {\n          setBottomNavHidden(true);\n          asyncLoading();\n        }\n      }\n    });\n  };\n\n  const onClickPrev = (goToPrev, steps, step) => {\n    if (steps.indexOf(step) <= 0) {\n      return;\n    }\n    goToPrev();\n  };\n\n  const { messages } = intl;\n  return (\n    <Card>\n      <CardBody className=\"wizard wizard-default\">\n        <Wizard>\n          <TopNavigation className=\"justify-content-center\" disableNav />\n          <Steps>\n            <Step\n              id=\"step1\"\n              name={messages['wizard.step-name-1']}\n              desc={messages['wizard.step-desc-1']}\n            >\n              <div className=\"wizard-basic-step\">\n                <Formik\n                  innerRef={forms[0]}\n                  initialValues={{\n                    name: fields[0].value,\n                  }}\n                  onSubmit={() => {}}\n                >\n                  {({ errors, touched }) => (\n                    <Form className=\"av-tooltip tooltip-label-right\">\n                      <FormGroup>\n                        <Label>{messages['forms.name']}</Label>\n                        <Field\n                          className=\"form-control\"\n                          name=\"name\"\n                          validate={validateName}\n                        />\n                        {errors.name && touched.name && (\n                          <div className=\"invalid-feedback d-block\">\n                            {errors.name}\n                          </div>\n                        )}\n                      </FormGroup>\n                    </Form>\n                  )}\n                </Formik>\n              </div>\n            </Step>\n            <Step\n              id=\"step2\"\n              name={messages['wizard.step-name-2']}\n              desc={messages['wizard.step-desc-2']}\n            >\n              <div className=\"wizard-basic-step\">\n                <Formik\n                  innerRef={forms[1]}\n                  initialValues={{\n                    email: fields[1].value,\n                  }}\n                  onSubmit={() => {}}\n                >\n                  {({ errors, touched }) => (\n                    <Form className=\"av-tooltip tooltip-label-right\">\n                      <FormGroup>\n                        <Label>{messages['forms.email']}</Label>\n                        <Field\n                          className=\"form-control\"\n                          name=\"email\"\n                          validate={validateEmail}\n                        />\n                        {errors.email && touched.email && (\n                          <div className=\"invalid-feedback d-block\">\n                            {errors.email}\n                          </div>\n                        )}\n                      </FormGroup>\n                    </Form>\n                  )}\n                </Formik>\n              </div>\n            </Step>\n            <Step\n              id=\"step3\"\n              name={messages['wizard.step-name-3']}\n              desc={messages['wizard.step-desc-3']}\n            >\n              <div className=\"wizard-basic-step\">\n                <Formik\n                  innerRef={forms[2]}\n                  initialValues={{\n                    password: fields[2].value,\n                  }}\n                  onSubmit={() => {}}\n                >\n                  {({ errors, touched }) => (\n                    <Form className=\"av-tooltip tooltip-label-right error-l-75\">\n                      <FormGroup>\n                        <Label>{messages['forms.password']}</Label>\n                        <Field\n                          className=\"form-control\"\n                          name=\"password\"\n                          type=\"password\"\n                          validate={validatePassword}\n                        />\n                        {errors.password && touched.password && (\n                          <div className=\"invalid-feedback d-block\">\n                            {errors.password}\n                          </div>\n                        )}\n                      </FormGroup>\n                    </Form>\n                  )}\n                </Formik>\n              </div>\n            </Step>\n            <Step id=\"step4\" hideTopNav>\n              <div className=\"wizard-basic-step text-center pt-3\">\n                {loading ? (\n                  <div>\n                    <Spinner color=\"primary\" className=\"mb-1\" />\n                    <p>\n                      <IntlMessages id=\"wizard.async\" />\n                    </p>\n                  </div>\n                ) : (\n                  <div>\n                    <h2 className=\"mb-2\">\n                      <IntlMessages id=\"wizard.content-thanks\" />\n                    </h2>\n                    <p>\n                      <IntlMessages id=\"wizard.registered\" />\n                    </p>\n                  </div>\n                )}\n              </div>\n            </Step>\n          </Steps>\n          <BottomNavigation\n            onClickNext={onClickNext}\n            onClickPrev={onClickPrev}\n            className={`justify-content-center ${\n              bottomNavHidden && 'invisible'\n            }`}\n            prevLabel={messages['wizard.prev']}\n            nextLabel={messages['wizard.next']}\n          />\n        </Wizard>\n      </CardBody>\n    </Card>\n  );\n};\nexport default injectIntl(Validation);\n","/* eslint-disable no-param-reassign */\nimport React from 'react';\nimport { Card, CardBody, Row } from 'reactstrap';\nimport { Wizard, Steps, Step } from 'react-albus';\nimport { injectIntl } from 'react-intl';\nimport IntlMessages from '../../helpers/IntlMessages';\nimport BottomNavigation from '../../components/wizard/BottomNavigation';\nimport TopNavigation from '../../components/wizard/TopNavigation';\nimport { Colxx } from '../../components/common/CustomBootstrap';\n\nconst Layouts = ({ intl }) => {\n  const topNavClick = (stepItem, push) => {\n    push(stepItem.id);\n  };\n\n  const onClickNext = (goToNext, steps, step) => {\n    step.isDone = true;\n    if (steps.length - 1 <= steps.indexOf(step)) {\n      return;\n    }\n    goToNext();\n  };\n\n  const onClickPrev = (goToPrev, steps, step) => {\n    if (steps.indexOf(step) <= 0) {\n      return;\n    }\n    goToPrev();\n  };\n\n  const { messages } = intl;\n  return (\n    <Row>\n      <Colxx xxs=\"12\" xl=\"6\" className=\"mb-5\">\n        <Card>\n          <CardBody className=\"wizard wizard-default\">\n            <Wizard>\n              <TopNavigation\n                className=\"justify-content-between\"\n                disableNav={false}\n                topNavClick={topNavClick}\n              />\n              <Steps>\n                <Step\n                  id=\"step1\"\n                  name={messages['wizard.step-name-1']}\n                  desc={messages['wizard.step-desc-1']}\n                >\n                  <div className=\"wizard-basic-step text-center\">\n                    <p>\n                      <IntlMessages id=\"wizard.content-1\" />\n                    </p>\n                  </div>\n                </Step>\n                <Step\n                  id=\"step2\"\n                  name={messages['wizard.step-name-2']}\n                  desc={messages['wizard.step-desc-2']}\n                >\n                  <div className=\"wizard-basic-step text-center\">\n                    <p>\n                      <IntlMessages id=\"wizard.content-2\" />\n                    </p>\n                  </div>\n                </Step>\n                <Step\n                  id=\"step3\"\n                  name={messages['wizard.step-name-3']}\n                  desc={messages['wizard.step-desc-3']}\n                  hideTopNav\n                >\n                  <div className=\"wizard-basic-step text-center\">\n                    <h2 className=\"mb-2\">\n                      <IntlMessages id=\"wizard.content-thanks\" />\n                    </h2>\n                    <p>\n                      <IntlMessages id=\"wizard.content-3\" />\n                    </p>\n                  </div>\n                </Step>\n              </Steps>\n              <BottomNavigation\n                onClickNext={onClickNext}\n                onClickPrev={onClickPrev}\n                className=\"justify-content-between\"\n                prevLabel={messages['wizard.prev']}\n                nextLabel={messages['wizard.next']}\n              />\n            </Wizard>\n          </CardBody>\n        </Card>\n      </Colxx>\n      <Colxx xxs=\"12\" xl=\"6\">\n        <Card>\n          <CardBody className=\"wizard wizard-default\">\n            <Wizard>\n              <TopNavigation\n                className=\"justify-content-start\"\n                disableNav={false}\n                topNavClick={topNavClick}\n              />\n              <Steps>\n                <Step\n                  id=\"step1\"\n                  name={messages['wizard.step-name-1']}\n                  desc={messages['wizard.step-desc-1']}\n                >\n                  <div className=\"wizard-basic-step\">\n                    <p>\n                      <IntlMessages id=\"wizard.content-1\" />\n                    </p>\n                  </div>\n                </Step>\n                <Step\n                  id=\"step2\"\n                  name={messages['wizard.step-name-2']}\n                  desc={messages['wizard.step-desc-2']}\n                >\n                  <div className=\"wizard-basic-step\">\n                    <p>\n                      <IntlMessages id=\"wizard.content-2\" />\n                    </p>\n                  </div>\n                </Step>\n                <Step\n                  id=\"step3\"\n                  name={messages['wizard.step-name-3']}\n                  desc={messages['wizard.step-desc-3']}\n                  hideTopNav\n                >\n                  <div className=\"wizard-basic-step\">\n                    <h2 className=\"mb-2\">\n                      <IntlMessages id=\"wizard.content-thanks\" />\n                    </h2>\n                    <p>\n                      <IntlMessages id=\"wizard.content-3\" />\n                    </p>\n                  </div>\n                </Step>\n              </Steps>\n              <BottomNavigation\n                onClickNext={onClickNext}\n                onClickPrev={onClickPrev}\n                className=\"justify-content-start\"\n                prevLabel={messages['wizard.prev']}\n                nextLabel={messages['wizard.next']}\n              />\n            </Wizard>\n          </CardBody>\n        </Card>\n      </Colxx>\n    </Row>\n  );\n};\nexport default injectIntl(Layouts);\n","import React from 'react';\nimport { Row } from 'reactstrap';\nimport {\n  Colxx,\n  Separator,\n} from '../../../../components/common/CustomBootstrap';\nimport Breadcrumb from '../../../../containers/navs/Breadcrumb';\nimport Basic from '../../../../containers/wizard/Basic';\nimport LastStepEnd from '../../../../containers/wizard/LastStepEnd';\nimport TopNavDisabled from '../../../../containers/wizard/TopNavDisabled';\nimport Validation from '../../../../containers/wizard/Validation';\nimport Layouts from '../../../../containers/wizard/Layouts';\n\nconst FormWizard = ({ match }) => {\n  return (\n    <>\n      <Row>\n        <Colxx xxs=\"12\">\n          <Breadcrumb heading=\"menu.form-wizard\" match={match} />\n          <Separator className=\"mb-5\" />\n        </Colxx>\n      </Row>\n      <Row>\n        <Colxx xxs=\"12\" className=\"mb-5\">\n          <h5 className=\"mb-4\">Basic</h5>\n          <Basic />\n        </Colxx>\n        <Colxx xxs=\"12\" className=\"mb-5\">\n          <h5 className=\"mb-4\">Last Step End</h5>\n          <LastStepEnd />\n        </Colxx>\n        <Colxx xxs=\"12\" className=\"mb-5\">\n          <h5 className=\"mb-4\">Top Navigation Disabled</h5>\n          <TopNavDisabled />\n        </Colxx>\n        <Colxx xxs=\"12\" className=\"mb-5\">\n          <h5 className=\"mb-4\">Validation</h5>\n          <Validation />\n        </Colxx>\n        <Colxx xxs=\"12\" className=\"mb-5\">\n          <h5 className=\"mb-4\">Layouts</h5>\n          <Layouts />\n        </Colxx>\n      </Row>\n    </>\n  );\n};\nexport default FormWizard;\n"],"sourceRoot":""}