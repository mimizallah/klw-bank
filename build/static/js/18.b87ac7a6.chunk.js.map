{"version":3,"sources":["../node_modules/tiny-warning/dist/tiny-warning.esm.js","../node_modules/react-fast-compare/index.js","../node_modules/deepmerge/dist/es.js","../node_modules/lodash-es/clone.js","../node_modules/lodash-es/toPath.js","../node_modules/lodash-es/cloneDeep.js","../../src/FormikContext.tsx","../../src/utils.ts","../../src/Formik.tsx","../../src/Field.tsx","../../src/Form.tsx","../../src/connect.tsx","../../src/FieldArray.tsx","../../src/ErrorMessage.tsx","../../src/FastField.tsx"],"names":["warning","condition","message","isArray","Array","keyList","Object","keys","hasProp","prototype","hasOwnProperty","hasElementType","Element","equal","a","b","i","length","key","arrA","arrB","dateA","Date","dateB","getTime","regexpA","RegExp","regexpB","toString","call","$$typeof","module","exports","error","match","number","console","warn","name","isMergeableObject","value","isNonNullObject","stringValue","REACT_ELEMENT_TYPE","isReactElement","isSpecial","Symbol","for","cloneUnlessOtherwiseSpecified","options","clone","deepmerge","val","defaultArrayMerge","target","source","concat","map","element","arrayMerge","sourceIsArray","destination","forEach","mergeObject","all","array","Error","reduce","prev","next","deepmerge_1","baseClone","toPath","arrayMap","toKey","isSymbol","copyArray","stringToPath","cloneDeep","CLONE_DEEP_FLAG","FormikContext","React","undefined","displayName","FormikProvider","Provider","FormikConsumer","Consumer","useFormikContext","formik","isEmptyArray","isFunction","obj","isObject","isInteger","String","Math","floor","Number","isString","isEmptyChildren","children","count","isPromise","then","getIn","def","p","path","setIn","res","resVal","pathArray","currentPath","currentObj","slice","nextPath","setNestedObjectValues","object","visited","response","WeakMap","k","get","set","emptyErrors","emptyTouched","useFormik","validateOnChange","validateOnBlur","validateOnMount","isInitialValid","enableReinitialize","onSubmit","rest","props","initialValues","initialErrors","initialTouched","initialStatus","isMounted","fieldRegistry","current","setIteration","stateRef","values","errors","touched","status","isSubmitting","isValidating","submitCount","state","dispatch","action","msg","type","payload","isEqual","field","formikReducer","x","runValidateHandler","Promise","resolve","reject","maybePromisedErrors","validate","actualException","runValidationSchema","validationSchema","schema","promise","validateAt","sync","context","normalizedValues","prepareDataForValidation","abortEarly","validateYupSchema","err","yupError","inner","yupToFormErrors","runSingleFieldLevelValidation","runFieldLevelValidations","fieldKeysWithValidation","filter","f","fieldValidations","fieldErrorsList","curr","index","runAllValidations","fieldErrors","schemaErrors","validateErrors","validateFormWithHighPriority","useEventCallback","combinedErrors","resetForm","nextState","dispatchFn","onReset","maybePromisedOnReset","imperativeMethods","validateField","maybePromise","registerField","unregisterField","setTouched","shouldValidate","setErrors","setValues","resolvedValues","setFieldError","setFieldValue","executeChange","eventOrTextValue","maybePath","parsed","persist","currentTarget","id","checked","outerHTML","multiple","test","parseFloat","isNaN","currentValue","valueProp","Boolean","currentArrayOfValues","isValueInArray","indexOf","getValueForCheckbox","from","el","selected","getSelectedValues","handleChange","eventOrPath","event","setFieldTouched","executeBlur","e","handleBlur","eventOrString","setFormikState","stateOrCb","setStatus","setSubmitting","submitForm","isInstanceOfError","promiseOrUndefined","executeSubmit","result","_errors","handleSubmit","preventDefault","stopPropagation","reason","validateForm","handleReset","getFieldMeta","initialValue","initialError","getFieldHelpers","setValue","setError","getFieldProps","nameOrOptions","isAnObject","valueState","onChange","onBlur","is","as","dirty","isValid","Formik","formikbag","component","render","innerRef","only","data","isPlainObject","shouldClone","push","useIsomorphicLayoutEffect","window","document","createElement","fn","ref","args","apply","Field","className","meta","legacyBag","form","asElement","Form","_action","connect","Comp","C","componentDisplayName","constructor","WrappedComponent","hoistNonReactStatics","insert","arrayLike","copy","copyArrayLike","splice","maxIndex","parseInt","max","createAlterationHandler","alteration","defaultFunction","FieldArrayInner","updateArrayField","alterTouched","alterErrors","prevState","updateErrors","updateTouched","fieldError","fieldTouched","handlePush","swap","indexA","indexB","handleSwap","move","to","handleMove","handleInsert","replace","handleReplace","unshift","arr","handleUnshift","handleRemove","remove","handlePop","pop","bind","componentDidUpdate","prevProps","this","every","v","tmp","arrayHelpers","restOfFormik","defaultProps"],"mappings":"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","file":"static/js/18.b87ac7a6.chunk.js","sourcesContent":["var isProduction = process.env.NODE_ENV === 'production';\nfunction warning(condition, message) {\n  if (!isProduction) {\n    if (condition) {\n      return;\n    }\n\n    var text = \"Warning: \" + message;\n\n    if (typeof console !== 'undefined') {\n      console.warn(text);\n    }\n\n    try {\n      throw Error(text);\n    } catch (x) {}\n  }\n}\n\nexport default warning;\n","'use strict';\n\nvar isArray = Array.isArray;\nvar keyList = Object.keys;\nvar hasProp = Object.prototype.hasOwnProperty;\nvar hasElementType = typeof Element !== 'undefined';\n\nfunction equal(a, b) {\n  // fast-deep-equal index.js 2.0.1\n  if (a === b) return true;\n\n  if (a && b && typeof a == 'object' && typeof b == 'object') {\n    var arrA = isArray(a)\n      , arrB = isArray(b)\n      , i\n      , length\n      , key;\n\n    if (arrA && arrB) {\n      length = a.length;\n      if (length != b.length) return false;\n      for (i = length; i-- !== 0;)\n        if (!equal(a[i], b[i])) return false;\n      return true;\n    }\n\n    if (arrA != arrB) return false;\n\n    var dateA = a instanceof Date\n      , dateB = b instanceof Date;\n    if (dateA != dateB) return false;\n    if (dateA && dateB) return a.getTime() == b.getTime();\n\n    var regexpA = a instanceof RegExp\n      , regexpB = b instanceof RegExp;\n    if (regexpA != regexpB) return false;\n    if (regexpA && regexpB) return a.toString() == b.toString();\n\n    var keys = keyList(a);\n    length = keys.length;\n\n    if (length !== keyList(b).length)\n      return false;\n\n    for (i = length; i-- !== 0;)\n      if (!hasProp.call(b, keys[i])) return false;\n    // end fast-deep-equal\n\n    // start react-fast-compare\n    // custom handling for DOM elements\n    if (hasElementType && a instanceof Element && b instanceof Element)\n      return a === b;\n\n    // custom handling for React\n    for (i = length; i-- !== 0;) {\n      key = keys[i];\n      if (key === '_owner' && a.$$typeof) {\n        // React-specific: avoid traversing React elements' _owner.\n        //  _owner contains circular references\n        // and is not needed when comparing the actual elements (and not their owners)\n        // .$$typeof and ._store on just reasonable markers of a react element\n        continue;\n      } else {\n        // all other properties should be traversed as usual\n        if (!equal(a[key], b[key])) return false;\n      }\n    }\n    // end react-fast-compare\n\n    // fast-deep-equal index.js 2.0.1\n    return true;\n  }\n\n  return a !== a && b !== b;\n}\n// end fast-deep-equal\n\nmodule.exports = function exportedEqual(a, b) {\n  try {\n    return equal(a, b);\n  } catch (error) {\n    if ((error.message && error.message.match(/stack|recursion/i)) || (error.number === -2146828260)) {\n      // warn on circular references, don't crash\n      // browsers give this different errors name and messages:\n      // chrome/safari: \"RangeError\", \"Maximum call stack size exceeded\"\n      // firefox: \"InternalError\", too much recursion\"\n      // edge: \"Error\", \"Out of stack space\"\n      console.warn('Warning: react-fast-compare does not handle circular references.', error.name, error.message);\n      return false;\n    }\n    // some other error. we should definitely know about these\n    throw error;\n  }\n};\n","var isMergeableObject = function isMergeableObject(value) {\n\treturn isNonNullObject(value)\n\t\t&& !isSpecial(value)\n};\n\nfunction isNonNullObject(value) {\n\treturn !!value && typeof value === 'object'\n}\n\nfunction isSpecial(value) {\n\tvar stringValue = Object.prototype.toString.call(value);\n\n\treturn stringValue === '[object RegExp]'\n\t\t|| stringValue === '[object Date]'\n\t\t|| isReactElement(value)\n}\n\n// see https://github.com/facebook/react/blob/b5ac963fb791d1298e7f396236383bc955f916c1/src/isomorphic/classic/element/ReactElement.js#L21-L25\nvar canUseSymbol = typeof Symbol === 'function' && Symbol.for;\nvar REACT_ELEMENT_TYPE = canUseSymbol ? Symbol.for('react.element') : 0xeac7;\n\nfunction isReactElement(value) {\n\treturn value.$$typeof === REACT_ELEMENT_TYPE\n}\n\nfunction emptyTarget(val) {\n\treturn Array.isArray(val) ? [] : {}\n}\n\nfunction cloneUnlessOtherwiseSpecified(value, options) {\n\treturn (options.clone !== false && options.isMergeableObject(value))\n\t\t? deepmerge(emptyTarget(value), value, options)\n\t\t: value\n}\n\nfunction defaultArrayMerge(target, source, options) {\n\treturn target.concat(source).map(function(element) {\n\t\treturn cloneUnlessOtherwiseSpecified(element, options)\n\t})\n}\n\nfunction mergeObject(target, source, options) {\n\tvar destination = {};\n\tif (options.isMergeableObject(target)) {\n\t\tObject.keys(target).forEach(function(key) {\n\t\t\tdestination[key] = cloneUnlessOtherwiseSpecified(target[key], options);\n\t\t});\n\t}\n\tObject.keys(source).forEach(function(key) {\n\t\tif (!options.isMergeableObject(source[key]) || !target[key]) {\n\t\t\tdestination[key] = cloneUnlessOtherwiseSpecified(source[key], options);\n\t\t} else {\n\t\t\tdestination[key] = deepmerge(target[key], source[key], options);\n\t\t}\n\t});\n\treturn destination\n}\n\nfunction deepmerge(target, source, options) {\n\toptions = options || {};\n\toptions.arrayMerge = options.arrayMerge || defaultArrayMerge;\n\toptions.isMergeableObject = options.isMergeableObject || isMergeableObject;\n\n\tvar sourceIsArray = Array.isArray(source);\n\tvar targetIsArray = Array.isArray(target);\n\tvar sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;\n\n\tif (!sourceAndTargetTypesMatch) {\n\t\treturn cloneUnlessOtherwiseSpecified(source, options)\n\t} else if (sourceIsArray) {\n\t\treturn options.arrayMerge(target, source, options)\n\t} else {\n\t\treturn mergeObject(target, source, options)\n\t}\n}\n\ndeepmerge.all = function deepmergeAll(array, options) {\n\tif (!Array.isArray(array)) {\n\t\tthrow new Error('first argument should be an array')\n\t}\n\n\treturn array.reduce(function(prev, next) {\n\t\treturn deepmerge(prev, next, options)\n\t}, {})\n};\n\nvar deepmerge_1 = deepmerge;\n\nexport default deepmerge_1;\n","import baseClone from './_baseClone.js';\n\n/** Used to compose bitmasks for cloning. */\nvar CLONE_SYMBOLS_FLAG = 4;\n\n/**\n * Creates a shallow clone of `value`.\n *\n * **Note:** This method is loosely based on the\n * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)\n * and supports cloning arrays, array buffers, booleans, date objects, maps,\n * numbers, `Object` objects, regexes, sets, strings, symbols, and typed\n * arrays. The own enumerable properties of `arguments` objects are cloned\n * as plain objects. An empty object is returned for uncloneable values such\n * as error objects, functions, DOM nodes, and WeakMaps.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to clone.\n * @returns {*} Returns the cloned value.\n * @see _.cloneDeep\n * @example\n *\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\n *\n * var shallow = _.clone(objects);\n * console.log(shallow[0] === objects[0]);\n * // => true\n */\nfunction clone(value) {\n  return baseClone(value, CLONE_SYMBOLS_FLAG);\n}\n\nexport default clone;\n","import arrayMap from './_arrayMap.js';\nimport copyArray from './_copyArray.js';\nimport isArray from './isArray.js';\nimport isSymbol from './isSymbol.js';\nimport stringToPath from './_stringToPath.js';\nimport toKey from './_toKey.js';\nimport toString from './toString.js';\n\n/**\n * Converts `value` to a property path array.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Util\n * @param {*} value The value to convert.\n * @returns {Array} Returns the new property path array.\n * @example\n *\n * _.toPath('a.b.c');\n * // => ['a', 'b', 'c']\n *\n * _.toPath('a[0].b.c');\n * // => ['a', '0', 'b', 'c']\n */\nfunction toPath(value) {\n  if (isArray(value)) {\n    return arrayMap(value, toKey);\n  }\n  return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));\n}\n\nexport default toPath;\n","import baseClone from './_baseClone.js';\n\n/** Used to compose bitmasks for cloning. */\nvar CLONE_DEEP_FLAG = 1,\n    CLONE_SYMBOLS_FLAG = 4;\n\n/**\n * This method is like `_.clone` except that it recursively clones `value`.\n *\n * @static\n * @memberOf _\n * @since 1.0.0\n * @category Lang\n * @param {*} value The value to recursively clone.\n * @returns {*} Returns the deep cloned value.\n * @see _.clone\n * @example\n *\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\n *\n * var deep = _.cloneDeep(objects);\n * console.log(deep[0] === objects[0]);\n * // => false\n */\nfunction cloneDeep(value) {\n  return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);\n}\n\nexport default cloneDeep;\n","import * as React from 'react';\nimport { FormikContextType } from './types';\nimport invariant from 'tiny-warning';\n\nexport const FormikContext = React.createContext<FormikContextType<any>>(\n  undefined as any\n);\nFormikContext.displayName = 'FormikContext';\n\nexport const FormikProvider = FormikContext.Provider;\nexport const FormikConsumer = FormikContext.Consumer;\n\nexport function useFormikContext<Values>() {\n  const formik = React.useContext<FormikContextType<Values>>(FormikContext);\n\n  invariant(\n    !!formik,\n    `Formik context is undefined, please verify you are calling useFormikContext() as child of a <Formik> component.`\n  );\n\n  return formik;\n}\n","import clone from 'lodash/clone';\nimport toPath from 'lodash/toPath';\nimport * as React from 'react';\n\n// Assertions\n\n/** @private is the value an empty array? */\nexport const isEmptyArray = (value?: any) =>\n  Array.isArray(value) && value.length === 0;\n\n/** @private is the given object a Function? */\nexport const isFunction = (obj: any): obj is Function =>\n  typeof obj === 'function';\n\n/** @private is the given object an Object? */\nexport const isObject = (obj: any): obj is Object =>\n  obj !== null && typeof obj === 'object';\n\n/** @private is the given object an integer? */\nexport const isInteger = (obj: any): boolean =>\n  String(Math.floor(Number(obj))) === obj;\n\n/** @private is the given object a string? */\nexport const isString = (obj: any): obj is string =>\n  Object.prototype.toString.call(obj) === '[object String]';\n\n/** @private is the given object a NaN? */\n// eslint-disable-next-line no-self-compare\nexport const isNaN = (obj: any): boolean => obj !== obj;\n\n/** @private Does a React component have exactly 0 children? */\nexport const isEmptyChildren = (children: any): boolean =>\n  React.Children.count(children) === 0;\n\n/** @private is the given object/value a promise? */\nexport const isPromise = (value: any): value is PromiseLike<any> =>\n  isObject(value) && isFunction(value.then);\n\n/** @private is the given object/value a type of synthetic event? */\nexport const isInputEvent = (value: any): value is React.SyntheticEvent<any> =>\n  value && isObject(value) && isObject(value.target);\n\n/**\n * Same as document.activeElement but wraps in a try-catch block. In IE it is\n * not safe to call document.activeElement if there is nothing focused.\n *\n * The activeElement will be null only if the document or document body is not\n * yet defined.\n *\n * @param {?Document} doc Defaults to current document.\n * @return {Element | null}\n * @see https://github.com/facebook/fbjs/blob/master/packages/fbjs/src/core/dom/getActiveElement.js\n */\nexport function getActiveElement(doc?: Document): Element | null {\n  doc = doc || (typeof document !== 'undefined' ? document : undefined);\n  if (typeof doc === 'undefined') {\n    return null;\n  }\n  try {\n    return doc.activeElement || doc.body;\n  } catch (e) {\n    return doc.body;\n  }\n}\n\n/**\n * Deeply get a value from an object via its path.\n */\nexport function getIn(\n  obj: any,\n  key: string | string[],\n  def?: any,\n  p: number = 0\n) {\n  const path = toPath(key);\n  while (obj && p < path.length) {\n    obj = obj[path[p++]];\n  }\n\n  // check if path is not in the end\n  if (p !== path.length && !obj) {\n    return def;\n  }\n\n  return obj === undefined ? def : obj;\n}\n\n/**\n * Deeply set a value from in object via it's path. If the value at `path`\n * has changed, return a shallow copy of obj with `value` set at `path`.\n * If `value` has not changed, return the original `obj`.\n *\n * Existing objects / arrays along `path` are also shallow copied. Sibling\n * objects along path retain the same internal js reference. Since new\n * objects / arrays are only created along `path`, we can test if anything\n * changed in a nested structure by comparing the object's reference in\n * the old and new object, similar to how russian doll cache invalidation\n * works.\n *\n * In earlier versions of this function, which used cloneDeep, there were\n * issues whereby settings a nested value would mutate the parent\n * instead of creating a new object. `clone` avoids that bug making a\n * shallow copy of the objects along the update path\n * so no object is mutated in place.\n *\n * Before changing this function, please read through the following\n * discussions.\n *\n * @see https://github.com/developit/linkstate\n * @see https://github.com/jaredpalmer/formik/pull/123\n */\nexport function setIn(obj: any, path: string, value: any): any {\n  let res: any = clone(obj); // this keeps inheritance when obj is a class\n  let resVal: any = res;\n  let i = 0;\n  let pathArray = toPath(path);\n\n  for (; i < pathArray.length - 1; i++) {\n    const currentPath: string = pathArray[i];\n    let currentObj: any = getIn(obj, pathArray.slice(0, i + 1));\n\n    if (currentObj && (isObject(currentObj) || Array.isArray(currentObj))) {\n      resVal = resVal[currentPath] = clone(currentObj);\n    } else {\n      const nextPath: string = pathArray[i + 1];\n      resVal = resVal[currentPath] =\n        isInteger(nextPath) && Number(nextPath) >= 0 ? [] : {};\n    }\n  }\n\n  // Return original object if new value is the same as current\n  if ((i === 0 ? obj : resVal)[pathArray[i]] === value) {\n    return obj;\n  }\n\n  if (value === undefined) {\n    delete resVal[pathArray[i]];\n  } else {\n    resVal[pathArray[i]] = value;\n  }\n\n  // If the path array has a single element, the loop did not run.\n  // Deleting on `resVal` had no effect in this scenario, so we delete on the result instead.\n  if (i === 0 && value === undefined) {\n    delete res[pathArray[i]];\n  }\n\n  return res;\n}\n\n/**\n * Recursively a set the same value for all keys and arrays nested object, cloning\n * @param object\n * @param value\n * @param visited\n * @param response\n */\nexport function setNestedObjectValues<T>(\n  object: any,\n  value: any,\n  visited: any = new WeakMap(),\n  response: any = {}\n): T {\n  for (let k of Object.keys(object)) {\n    const val = object[k];\n    if (isObject(val)) {\n      if (!visited.get(val)) {\n        visited.set(val, true);\n        // In order to keep array values consistent for both dot path  and\n        // bracket syntax, we need to check if this is an array so that\n        // this will output  { friends: [true] } and not { friends: { \"0\": true } }\n        response[k] = Array.isArray(val) ? [] : {};\n        setNestedObjectValues(val, value, visited, response[k]);\n      }\n    } else {\n      response[k] = value;\n    }\n  }\n\n  return response;\n}\n","import deepmerge from 'deepmerge';\nimport isPlainObject from 'lodash/isPlainObject';\nimport * as React from 'react';\nimport isEqual from 'react-fast-compare';\nimport invariant from 'tiny-warning';\nimport { FieldConfig } from './Field';\nimport { FormikProvider } from './FormikContext';\nimport {\n  FieldHelperProps,\n  FieldInputProps,\n  FieldMetaProps,\n  FormikConfig,\n  FormikErrors,\n  FormikHandlers,\n  FormikHelpers,\n  FormikProps,\n  FormikState,\n  FormikTouched,\n  FormikValues,\n} from './types';\nimport {\n  getActiveElement,\n  getIn,\n  isEmptyChildren,\n  isFunction,\n  isObject,\n  isPromise,\n  isString,\n  setIn,\n  setNestedObjectValues,\n} from './utils';\n\ntype FormikMessage<Values> =\n  | { type: 'SUBMIT_ATTEMPT' }\n  | { type: 'SUBMIT_FAILURE' }\n  | { type: 'SUBMIT_SUCCESS' }\n  | { type: 'SET_ISVALIDATING'; payload: boolean }\n  | { type: 'SET_ISSUBMITTING'; payload: boolean }\n  | { type: 'SET_VALUES'; payload: Values }\n  | { type: 'SET_FIELD_VALUE'; payload: { field: string; value?: any } }\n  | { type: 'SET_FIELD_TOUCHED'; payload: { field: string; value?: boolean } }\n  | { type: 'SET_FIELD_ERROR'; payload: { field: string; value?: string } }\n  | { type: 'SET_TOUCHED'; payload: FormikTouched<Values> }\n  | { type: 'SET_ERRORS'; payload: FormikErrors<Values> }\n  | { type: 'SET_STATUS'; payload: any }\n  | {\n      type: 'SET_FORMIK_STATE';\n      payload: (s: FormikState<Values>) => FormikState<Values>;\n    }\n  | {\n      type: 'RESET_FORM';\n      payload: FormikState<Values>;\n    };\n\n// State reducer\nfunction formikReducer<Values>(\n  state: FormikState<Values>,\n  msg: FormikMessage<Values>\n) {\n  switch (msg.type) {\n    case 'SET_VALUES':\n      return { ...state, values: msg.payload };\n    case 'SET_TOUCHED':\n      return { ...state, touched: msg.payload };\n    case 'SET_ERRORS':\n      if (isEqual(state.errors, msg.payload)) {\n        return state;\n      }\n\n      return { ...state, errors: msg.payload };\n    case 'SET_STATUS':\n      return { ...state, status: msg.payload };\n    case 'SET_ISSUBMITTING':\n      return { ...state, isSubmitting: msg.payload };\n    case 'SET_ISVALIDATING':\n      return { ...state, isValidating: msg.payload };\n    case 'SET_FIELD_VALUE':\n      return {\n        ...state,\n        values: setIn(state.values, msg.payload.field, msg.payload.value),\n      };\n    case 'SET_FIELD_TOUCHED':\n      return {\n        ...state,\n        touched: setIn(state.touched, msg.payload.field, msg.payload.value),\n      };\n    case 'SET_FIELD_ERROR':\n      return {\n        ...state,\n        errors: setIn(state.errors, msg.payload.field, msg.payload.value),\n      };\n    case 'RESET_FORM':\n      return { ...state, ...msg.payload };\n    case 'SET_FORMIK_STATE':\n      return msg.payload(state);\n    case 'SUBMIT_ATTEMPT':\n      return {\n        ...state,\n        touched: setNestedObjectValues<FormikTouched<Values>>(\n          state.values,\n          true\n        ),\n        isSubmitting: true,\n        submitCount: state.submitCount + 1,\n      };\n    case 'SUBMIT_FAILURE':\n      return {\n        ...state,\n        isSubmitting: false,\n      };\n    case 'SUBMIT_SUCCESS':\n      return {\n        ...state,\n        isSubmitting: false,\n      };\n    default:\n      return state;\n  }\n}\n\n// Initial empty states // objects\nconst emptyErrors: FormikErrors<unknown> = {};\nconst emptyTouched: FormikTouched<unknown> = {};\n\n// This is an object that contains a map of all registered fields\n// and their validate functions\ninterface FieldRegistry {\n  [field: string]: {\n    validate: (value: any) => string | Promise<string> | undefined;\n  };\n}\n\nexport function useFormik<Values extends FormikValues = FormikValues>({\n  validateOnChange = true,\n  validateOnBlur = true,\n  validateOnMount = false,\n  isInitialValid,\n  enableReinitialize = false,\n  onSubmit,\n  ...rest\n}: FormikConfig<Values>) {\n  const props = {\n    validateOnChange,\n    validateOnBlur,\n    validateOnMount,\n    onSubmit,\n    ...rest,\n  };\n  const initialValues = React.useRef(props.initialValues);\n  const initialErrors = React.useRef(props.initialErrors || emptyErrors);\n  const initialTouched = React.useRef(props.initialTouched || emptyTouched);\n  const initialStatus = React.useRef(props.initialStatus);\n  const isMounted = React.useRef<boolean>(false);\n  const fieldRegistry = React.useRef<FieldRegistry>({});\n  if (__DEV__) {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useEffect(() => {\n      invariant(\n        typeof isInitialValid === 'undefined',\n        'isInitialValid has been deprecated and will be removed in future versions of Formik. Please use initialErrors or validateOnMount instead.'\n      );\n      // eslint-disable-next-line\n    }, []);\n  }\n\n  React.useEffect(() => {\n    isMounted.current = true;\n\n    return () => {\n      isMounted.current = false;\n    };\n  }, []);\n\n  const [, setIteration] = React.useState(0);\n  const stateRef = React.useRef<FormikState<Values>>({\n    values: props.initialValues,\n    errors: props.initialErrors || emptyErrors,\n    touched: props.initialTouched || emptyTouched,\n    status: props.initialStatus,\n    isSubmitting: false,\n    isValidating: false,\n    submitCount: 0,\n  });\n\n  const state = stateRef.current;\n\n  const dispatch = React.useCallback((action: FormikMessage<Values>) => {\n    const prev = stateRef.current;\n\n    stateRef.current = formikReducer(prev, action);\n\n    // force rerender\n    if (prev !== stateRef.current) setIteration(x => x + 1);\n  }, []);\n\n  const runValidateHandler = React.useCallback(\n    (values: Values, field?: string): Promise<FormikErrors<Values>> => {\n      return new Promise((resolve, reject) => {\n        const maybePromisedErrors = (props.validate as any)(values, field);\n        if (maybePromisedErrors == null) {\n          // use loose null check here on purpose\n          resolve(emptyErrors);\n        } else if (isPromise(maybePromisedErrors)) {\n          (maybePromisedErrors as Promise<any>).then(\n            errors => {\n              resolve(errors || emptyErrors);\n            },\n            actualException => {\n              if (process.env.NODE_ENV !== 'production') {\n                console.warn(\n                  `Warning: An unhandled error was caught during validation in <Formik validate />`,\n                  actualException\n                );\n              }\n\n              reject(actualException);\n            }\n          );\n        } else {\n          resolve(maybePromisedErrors);\n        }\n      });\n    },\n    [props.validate]\n  );\n\n  /**\n   * Run validation against a Yup schema and optionally run a function if successful\n   */\n  const runValidationSchema = React.useCallback(\n    (values: Values, field?: string): Promise<FormikErrors<Values>> => {\n      const validationSchema = props.validationSchema;\n      const schema = isFunction(validationSchema)\n        ? validationSchema(field)\n        : validationSchema;\n      const promise =\n        field && schema.validateAt\n          ? schema.validateAt(field, values)\n          : validateYupSchema(values, schema);\n      return new Promise((resolve, reject) => {\n        promise.then(\n          () => {\n            resolve(emptyErrors);\n          },\n          (err: any) => {\n            // Yup will throw a validation error if validation fails. We catch those and\n            // resolve them into Formik errors. We can sniff if something is a Yup error\n            // by checking error.name.\n            // @see https://github.com/jquense/yup#validationerrorerrors-string--arraystring-value-any-path-string\n            if (err.name === 'ValidationError') {\n              resolve(yupToFormErrors(err));\n            } else {\n              // We throw any other errors\n              if (process.env.NODE_ENV !== 'production') {\n                console.warn(\n                  `Warning: An unhandled error was caught during validation in <Formik validationSchema />`,\n                  err\n                );\n              }\n\n              reject(err);\n            }\n          }\n        );\n      });\n    },\n    [props.validationSchema]\n  );\n\n  const runSingleFieldLevelValidation = React.useCallback(\n    (field: string, value: void | string): Promise<string> => {\n      return new Promise(resolve =>\n        resolve(fieldRegistry.current[field].validate(value) as string)\n      );\n    },\n    []\n  );\n\n  const runFieldLevelValidations = React.useCallback(\n    (values: Values): Promise<FormikErrors<Values>> => {\n      const fieldKeysWithValidation: string[] = Object.keys(\n        fieldRegistry.current\n      ).filter(f => isFunction(fieldRegistry.current[f].validate));\n\n      // Construct an array with all of the field validation functions\n      const fieldValidations: Promise<string>[] =\n        fieldKeysWithValidation.length > 0\n          ? fieldKeysWithValidation.map(f =>\n              runSingleFieldLevelValidation(f, getIn(values, f))\n            )\n          : [Promise.resolve('DO_NOT_DELETE_YOU_WILL_BE_FIRED')]; // use special case ;)\n\n      return Promise.all(fieldValidations).then((fieldErrorsList: string[]) =>\n        fieldErrorsList.reduce((prev, curr, index) => {\n          if (curr === 'DO_NOT_DELETE_YOU_WILL_BE_FIRED') {\n            return prev;\n          }\n          if (curr) {\n            prev = setIn(prev, fieldKeysWithValidation[index], curr);\n          }\n          return prev;\n        }, {})\n      );\n    },\n    [runSingleFieldLevelValidation]\n  );\n\n  // Run all validations and return the result\n  const runAllValidations = React.useCallback(\n    (values: Values) => {\n      return Promise.all([\n        runFieldLevelValidations(values),\n        props.validationSchema ? runValidationSchema(values) : {},\n        props.validate ? runValidateHandler(values) : {},\n      ]).then(([fieldErrors, schemaErrors, validateErrors]) => {\n        const combinedErrors = deepmerge.all<FormikErrors<Values>>(\n          [fieldErrors, schemaErrors, validateErrors],\n          { arrayMerge }\n        );\n        return combinedErrors;\n      });\n    },\n    [\n      props.validate,\n      props.validationSchema,\n      runFieldLevelValidations,\n      runValidateHandler,\n      runValidationSchema,\n    ]\n  );\n\n  // Run all validations methods and update state accordingly\n  const validateFormWithHighPriority = useEventCallback(\n    (values: Values = state.values) => {\n      dispatch({ type: 'SET_ISVALIDATING', payload: true });\n      return runAllValidations(values).then(combinedErrors => {\n        if (!!isMounted.current) {\n          dispatch({ type: 'SET_ISVALIDATING', payload: false });\n          dispatch({ type: 'SET_ERRORS', payload: combinedErrors });\n        }\n        return combinedErrors;\n      });\n    }\n  );\n\n  React.useEffect(() => {\n    if (\n      validateOnMount &&\n      isMounted.current === true &&\n      isEqual(initialValues.current, props.initialValues)\n    ) {\n      validateFormWithHighPriority(initialValues.current);\n    }\n  }, [validateOnMount, validateFormWithHighPriority]);\n\n  const resetForm = React.useCallback(\n    (nextState?: Partial<FormikState<Values>>) => {\n      const values =\n        nextState && nextState.values\n          ? nextState.values\n          : initialValues.current;\n      const errors =\n        nextState && nextState.errors\n          ? nextState.errors\n          : initialErrors.current\n          ? initialErrors.current\n          : props.initialErrors || {};\n      const touched =\n        nextState && nextState.touched\n          ? nextState.touched\n          : initialTouched.current\n          ? initialTouched.current\n          : props.initialTouched || {};\n      const status =\n        nextState && nextState.status\n          ? nextState.status\n          : initialStatus.current\n          ? initialStatus.current\n          : props.initialStatus;\n      initialValues.current = values;\n      initialErrors.current = errors;\n      initialTouched.current = touched;\n      initialStatus.current = status;\n\n      const dispatchFn = () => {\n        dispatch({\n          type: 'RESET_FORM',\n          payload: {\n            isSubmitting: !!nextState && !!nextState.isSubmitting,\n            errors,\n            touched,\n            status,\n            values,\n            isValidating: !!nextState && !!nextState.isValidating,\n            submitCount:\n              !!nextState &&\n              !!nextState.submitCount &&\n              typeof nextState.submitCount === 'number'\n                ? nextState.submitCount\n                : 0,\n          },\n        });\n      };\n\n      if (props.onReset) {\n        const maybePromisedOnReset = (props.onReset as any)(\n          state.values,\n          imperativeMethods\n        );\n\n        if (isPromise(maybePromisedOnReset)) {\n          (maybePromisedOnReset as Promise<any>).then(dispatchFn);\n        } else {\n          dispatchFn();\n        }\n      } else {\n        dispatchFn();\n      }\n    },\n    [props.initialErrors, props.initialStatus, props.initialTouched, props.onReset]\n  );\n\n  React.useEffect(() => {\n    if (\n      isMounted.current === true &&\n      !isEqual(initialValues.current, props.initialValues)\n    ) {\n      if (enableReinitialize) {\n        initialValues.current = props.initialValues;\n        resetForm();\n        if (validateOnMount) {\n          validateFormWithHighPriority(initialValues.current);\n        }\n      }\n    }\n  }, [\n    enableReinitialize,\n    props.initialValues,\n    resetForm,\n    validateOnMount,\n    validateFormWithHighPriority,\n  ]);\n\n  React.useEffect(() => {\n    if (\n      enableReinitialize &&\n      isMounted.current === true &&\n      !isEqual(initialErrors.current, props.initialErrors)\n    ) {\n      initialErrors.current = props.initialErrors || emptyErrors;\n      dispatch({\n        type: 'SET_ERRORS',\n        payload: props.initialErrors || emptyErrors,\n      });\n    }\n  }, [enableReinitialize, props.initialErrors]);\n\n  React.useEffect(() => {\n    if (\n      enableReinitialize &&\n      isMounted.current === true &&\n      !isEqual(initialTouched.current, props.initialTouched)\n    ) {\n      initialTouched.current = props.initialTouched || emptyTouched;\n      dispatch({\n        type: 'SET_TOUCHED',\n        payload: props.initialTouched || emptyTouched,\n      });\n    }\n  }, [enableReinitialize, props.initialTouched]);\n\n  React.useEffect(() => {\n    if (\n      enableReinitialize &&\n      isMounted.current === true &&\n      !isEqual(initialStatus.current, props.initialStatus)\n    ) {\n      initialStatus.current = props.initialStatus;\n      dispatch({\n        type: 'SET_STATUS',\n        payload: props.initialStatus,\n      });\n    }\n  }, [enableReinitialize, props.initialStatus, props.initialTouched]);\n\n  const validateField = useEventCallback((name: string) => {\n    // This will efficiently validate a single field by avoiding state\n    // changes if the validation function is synchronous. It's different from\n    // what is called when using validateForm.\n\n    if (\n      fieldRegistry.current[name] &&\n      isFunction(fieldRegistry.current[name].validate)\n    ) {\n      const value = getIn(state.values, name);\n      const maybePromise = fieldRegistry.current[name].validate(value);\n      if (isPromise(maybePromise)) {\n        // Only flip isValidating if the function is async.\n        dispatch({ type: 'SET_ISVALIDATING', payload: true });\n        return maybePromise\n          .then((x: any) => x)\n          .then((error: string) => {\n            dispatch({\n              type: 'SET_FIELD_ERROR',\n              payload: { field: name, value: error },\n            });\n            dispatch({ type: 'SET_ISVALIDATING', payload: false });\n          });\n      } else {\n        dispatch({\n          type: 'SET_FIELD_ERROR',\n          payload: {\n            field: name,\n            value: maybePromise as string | undefined,\n          },\n        });\n        return Promise.resolve(maybePromise as string | undefined);\n      }\n    } else if (props.validationSchema) {\n      dispatch({ type: 'SET_ISVALIDATING', payload: true });\n      return runValidationSchema(state.values, name)\n        .then((x: any) => x)\n        .then((error: any) => {\n          dispatch({\n            type: 'SET_FIELD_ERROR',\n            payload: { field: name, value: getIn(error, name) },\n          });\n          dispatch({ type: 'SET_ISVALIDATING', payload: false });\n        });\n    }\n\n    return Promise.resolve();\n  });\n\n  const registerField = React.useCallback((name: string, { validate }: any) => {\n    fieldRegistry.current[name] = {\n      validate,\n    };\n  }, []);\n\n  const unregisterField = React.useCallback((name: string) => {\n    delete fieldRegistry.current[name];\n  }, []);\n\n  const setTouched = useEventCallback(\n    (touched: FormikTouched<Values>, shouldValidate?: boolean) => {\n      dispatch({ type: 'SET_TOUCHED', payload: touched });\n      const willValidate =\n        shouldValidate === undefined ? validateOnBlur : shouldValidate;\n      return willValidate\n        ? validateFormWithHighPriority(state.values)\n        : Promise.resolve();\n    }\n  );\n\n  const setErrors = React.useCallback((errors: FormikErrors<Values>) => {\n    dispatch({ type: 'SET_ERRORS', payload: errors });\n  }, []);\n\n  const setValues = useEventCallback(\n    (values: React.SetStateAction<Values>, shouldValidate?: boolean) => {\n      const resolvedValues = isFunction(values) ? values(state.values) : values;\n\n      dispatch({ type: 'SET_VALUES', payload: resolvedValues });\n      const willValidate =\n        shouldValidate === undefined ? validateOnChange : shouldValidate;\n      return willValidate\n        ? validateFormWithHighPriority(resolvedValues)\n        : Promise.resolve();\n    }\n  );\n\n  const setFieldError = React.useCallback(\n    (field: string, value: string | undefined) => {\n      dispatch({\n        type: 'SET_FIELD_ERROR',\n        payload: { field, value },\n      });\n    },\n    []\n  );\n\n  const setFieldValue = useEventCallback(\n    (field: string, value: any, shouldValidate?: boolean) => {\n      dispatch({\n        type: 'SET_FIELD_VALUE',\n        payload: {\n          field,\n          value,\n        },\n      });\n      const willValidate =\n        shouldValidate === undefined ? validateOnChange : shouldValidate;\n      return willValidate\n        ? validateFormWithHighPriority(setIn(state.values, field, value))\n        : Promise.resolve();\n    }\n  );\n\n  const executeChange = React.useCallback(\n    (eventOrTextValue: string | React.ChangeEvent<any>, maybePath?: string) => {\n      // By default, assume that the first argument is a string. This allows us to use\n      // handleChange with React Native and React Native Web's onChangeText prop which\n      // provides just the value of the input.\n      let field = maybePath;\n      let val = eventOrTextValue;\n      let parsed;\n      // If the first argument is not a string though, it has to be a synthetic React Event (or a fake one),\n      // so we handle like we would a normal HTML change event.\n      if (!isString(eventOrTextValue)) {\n        // If we can, persist the event\n        // @see https://reactjs.org/docs/events.html#event-pooling\n        if ((eventOrTextValue as any).persist) {\n          (eventOrTextValue as React.ChangeEvent<any>).persist();\n        }\n        const target = eventOrTextValue.target\n          ? (eventOrTextValue as React.ChangeEvent<any>).target\n          : (eventOrTextValue as React.ChangeEvent<any>).currentTarget;\n\n        const {\n          type,\n          name,\n          id,\n          value,\n          checked,\n          outerHTML,\n          options,\n          multiple,\n        } = target;\n\n        field = maybePath ? maybePath : name ? name : id;\n        if (!field && __DEV__) {\n          warnAboutMissingIdentifier({\n            htmlContent: outerHTML,\n            documentationAnchorLink: 'handlechange-e-reactchangeeventany--void',\n            handlerName: 'handleChange',\n          });\n        }\n        val = /number|range/.test(type)\n          ? ((parsed = parseFloat(value)), isNaN(parsed) ? '' : parsed)\n          : /checkbox/.test(type) // checkboxes\n          ? getValueForCheckbox(getIn(state.values, field!), checked, value)\n          : options && multiple // <select multiple>\n          ? getSelectedValues(options)\n          : value;\n      }\n\n      if (field) {\n        // Set form fields by name\n        setFieldValue(field, val);\n      }\n    },\n    [setFieldValue, state.values]\n  );\n\n  const handleChange = useEventCallback<FormikHandlers['handleChange']>(\n    (\n      eventOrPath: string | React.ChangeEvent<any>\n    ): void | ((eventOrTextValue: string | React.ChangeEvent<any>) => void) => {\n      if (isString(eventOrPath)) {\n        return event => executeChange(event, eventOrPath);\n      } else {\n        executeChange(eventOrPath);\n      }\n    }\n  );\n\n  const setFieldTouched = useEventCallback(\n    (field: string, touched: boolean = true, shouldValidate?: boolean) => {\n      dispatch({\n        type: 'SET_FIELD_TOUCHED',\n        payload: {\n          field,\n          value: touched,\n        },\n      });\n      const willValidate =\n        shouldValidate === undefined ? validateOnBlur : shouldValidate;\n      return willValidate\n        ? validateFormWithHighPriority(state.values)\n        : Promise.resolve();\n    }\n  );\n\n  const executeBlur = React.useCallback(\n    (e: any, path?: string) => {\n      if (e.persist) {\n        e.persist();\n      }\n      const { name, id, outerHTML } = e.target;\n      const field = path ? path : name ? name : id;\n\n      if (!field && __DEV__) {\n        warnAboutMissingIdentifier({\n          htmlContent: outerHTML,\n          documentationAnchorLink: 'handleblur-e-any--void',\n          handlerName: 'handleBlur',\n        });\n      }\n\n      setFieldTouched(field, true);\n    },\n    [setFieldTouched]\n  );\n\n  const handleBlur = useEventCallback<FormikHandlers['handleBlur']>(\n    (eventOrString: any): void | ((e: any) => void) => {\n      if (isString(eventOrString)) {\n        return event => executeBlur(event, eventOrString);\n      } else {\n        executeBlur(eventOrString);\n      }\n    }\n  );\n\n  const setFormikState = React.useCallback(\n    (\n      stateOrCb:\n        | FormikState<Values>\n        | ((state: FormikState<Values>) => FormikState<Values>)\n    ): void => {\n      if (isFunction(stateOrCb)) {\n        dispatch({ type: 'SET_FORMIK_STATE', payload: stateOrCb });\n      } else {\n        dispatch({ type: 'SET_FORMIK_STATE', payload: () => stateOrCb });\n      }\n    },\n    []\n  );\n\n  const setStatus = React.useCallback((status: any) => {\n    dispatch({ type: 'SET_STATUS', payload: status });\n  }, []);\n\n  const setSubmitting = React.useCallback((isSubmitting: boolean) => {\n    dispatch({ type: 'SET_ISSUBMITTING', payload: isSubmitting });\n  }, []);\n\n  const submitForm = useEventCallback(() => {\n    dispatch({ type: 'SUBMIT_ATTEMPT' });\n    return validateFormWithHighPriority().then(\n      (combinedErrors: FormikErrors<Values>) => {\n        // In case an error was thrown and passed to the resolved Promise,\n        // `combinedErrors` can be an instance of an Error. We need to check\n        // that and abort the submit.\n        // If we don't do that, calling `Object.keys(new Error())` yields an\n        // empty array, which causes the validation to pass and the form\n        // to be submitted.\n\n        const isInstanceOfError = combinedErrors instanceof Error;\n        const isActuallyValid =\n          !isInstanceOfError && Object.keys(combinedErrors).length === 0;\n        if (isActuallyValid) {\n          // Proceed with submit...\n          //\n          // To respect sync submit fns, we can't simply wrap executeSubmit in a promise and\n          // _always_ dispatch SUBMIT_SUCCESS because isSubmitting would then always be false.\n          // This would be fine in simple cases, but make it impossible to disable submit\n          // buttons where people use callbacks or promises as side effects (which is basically\n          // all of v1 Formik code). Instead, recall that we are inside of a promise chain already,\n          //  so we can try/catch executeSubmit(), if it returns undefined, then just bail.\n          // If there are errors, throw em. Otherwise, wrap executeSubmit in a promise and handle\n          // cleanup of isSubmitting on behalf of the consumer.\n          let promiseOrUndefined;\n          try {\n            promiseOrUndefined = executeSubmit();\n            // Bail if it's sync, consumer is responsible for cleaning up\n            // via setSubmitting(false)\n            if (promiseOrUndefined === undefined) {\n              return;\n            }\n          } catch (error) {\n            throw error;\n          }\n\n          return Promise.resolve(promiseOrUndefined)\n            .then(result => {\n              if (!!isMounted.current) {\n                dispatch({ type: 'SUBMIT_SUCCESS' });\n              }\n              return result;\n            })\n            .catch(_errors => {\n              if (!!isMounted.current) {\n                dispatch({ type: 'SUBMIT_FAILURE' });\n                // This is a legit error rejected by the onSubmit fn\n                // so we don't want to break the promise chain\n                throw _errors;\n              }\n            });\n        } else if (!!isMounted.current) {\n          // ^^^ Make sure Formik is still mounted before updating state\n          dispatch({ type: 'SUBMIT_FAILURE' });\n          // throw combinedErrors;\n          if (isInstanceOfError) {\n            throw combinedErrors;\n          }\n        }\n        return;\n      }\n    );\n  });\n\n  const handleSubmit = useEventCallback(\n    (e?: React.FormEvent<HTMLFormElement>) => {\n      if (e && e.preventDefault && isFunction(e.preventDefault)) {\n        e.preventDefault();\n      }\n\n      if (e && e.stopPropagation && isFunction(e.stopPropagation)) {\n        e.stopPropagation();\n      }\n\n      // Warn if form submission is triggered by a <button> without a\n      // specified `type` attribute during development. This mitigates\n      // a common gotcha in forms with both reset and submit buttons,\n      // where the dev forgets to add type=\"button\" to the reset button.\n      if (__DEV__ && typeof document !== 'undefined') {\n        // Safely get the active element (works with IE)\n        const activeElement = getActiveElement();\n        if (\n          activeElement !== null &&\n          activeElement instanceof HTMLButtonElement\n        ) {\n          invariant(\n            activeElement.attributes &&\n              activeElement.attributes.getNamedItem('type'),\n            'You submitted a Formik form using a button with an unspecified `type` attribute.  Most browsers default button elements to `type=\"submit\"`. If this is not a submit button, please add `type=\"button\"`.'\n          );\n        }\n      }\n\n      submitForm().catch(reason => {\n        console.warn(\n          `Warning: An unhandled error was caught from submitForm()`,\n          reason\n        );\n      });\n    }\n  );\n\n  const imperativeMethods: FormikHelpers<Values> = {\n    resetForm,\n    validateForm: validateFormWithHighPriority,\n    validateField,\n    setErrors,\n    setFieldError,\n    setFieldTouched,\n    setFieldValue,\n    setStatus,\n    setSubmitting,\n    setTouched,\n    setValues,\n    setFormikState,\n    submitForm,\n  };\n\n  const executeSubmit = useEventCallback(() => {\n    return onSubmit(state.values, imperativeMethods);\n  });\n\n  const handleReset = useEventCallback(e => {\n    if (e && e.preventDefault && isFunction(e.preventDefault)) {\n      e.preventDefault();\n    }\n\n    if (e && e.stopPropagation && isFunction(e.stopPropagation)) {\n      e.stopPropagation();\n    }\n\n    resetForm();\n  });\n\n  const getFieldMeta = React.useCallback(\n    (name: string): FieldMetaProps<any> => {\n      return {\n        value: getIn(state.values, name),\n        error: getIn(state.errors, name),\n        touched: !!getIn(state.touched, name),\n        initialValue: getIn(initialValues.current, name),\n        initialTouched: !!getIn(initialTouched.current, name),\n        initialError: getIn(initialErrors.current, name),\n      };\n    },\n    [state.errors, state.touched, state.values]\n  );\n\n  const getFieldHelpers = React.useCallback(\n    (name: string): FieldHelperProps<any> => {\n      return {\n        setValue: (value: any, shouldValidate?: boolean) =>\n          setFieldValue(name, value, shouldValidate),\n        setTouched: (value: boolean, shouldValidate?: boolean) =>\n          setFieldTouched(name, value, shouldValidate),\n        setError: (value: any) => setFieldError(name, value),\n      };\n    },\n    [setFieldValue, setFieldTouched, setFieldError]\n  );\n\n  const getFieldProps = React.useCallback(\n    (nameOrOptions: string | FieldConfig<any>): FieldInputProps<any> => {\n      const isAnObject = isObject(nameOrOptions);\n      const name = isAnObject\n        ? (nameOrOptions as FieldConfig<any>).name\n        : nameOrOptions;\n      const valueState = getIn(state.values, name);\n\n      const field: FieldInputProps<any> = {\n        name,\n        value: valueState,\n        onChange: handleChange,\n        onBlur: handleBlur,\n      };\n      if (isAnObject) {\n        const {\n          type,\n          value: valueProp, // value is special for checkboxes\n          as: is,\n          multiple,\n        } = nameOrOptions as FieldConfig<any>;\n\n        if (type === 'checkbox') {\n          if (valueProp === undefined) {\n            field.checked = !!valueState;\n          } else {\n            field.checked = !!(\n              Array.isArray(valueState) && ~valueState.indexOf(valueProp)\n            );\n            field.value = valueProp;\n          }\n        } else if (type === 'radio') {\n          field.checked = valueState === valueProp;\n          field.value = valueProp;\n        } else if (is === 'select' && multiple) {\n          field.value = field.value || [];\n          field.multiple = true;\n        }\n      }\n      return field;\n    },\n    [handleBlur, handleChange, state.values]\n  );\n\n  const dirty = React.useMemo(\n    () => !isEqual(initialValues.current, state.values),\n    [initialValues.current, state.values]\n  );\n\n  const isValid = React.useMemo(\n    () =>\n      typeof isInitialValid !== 'undefined'\n        ? dirty\n          ? state.errors && Object.keys(state.errors).length === 0\n          : isInitialValid !== false && isFunction(isInitialValid)\n          ? (isInitialValid as (props: FormikConfig<Values>) => boolean)(props)\n          : (isInitialValid as boolean)\n        : state.errors && Object.keys(state.errors).length === 0,\n    [isInitialValid, dirty, state.errors, props]\n  );\n\n  const ctx = {\n    ...state,\n    initialValues: initialValues.current,\n    initialErrors: initialErrors.current,\n    initialTouched: initialTouched.current,\n    initialStatus: initialStatus.current,\n    handleBlur,\n    handleChange,\n    handleReset,\n    handleSubmit,\n    resetForm,\n    setErrors,\n    setFormikState,\n    setFieldTouched,\n    setFieldValue,\n    setFieldError,\n    setStatus,\n    setSubmitting,\n    setTouched,\n    setValues,\n    submitForm,\n    validateForm: validateFormWithHighPriority,\n    validateField,\n    isValid,\n    dirty,\n    unregisterField,\n    registerField,\n    getFieldProps,\n    getFieldMeta,\n    getFieldHelpers,\n    validateOnBlur,\n    validateOnChange,\n    validateOnMount,\n  };\n\n  return ctx;\n}\n\nexport function Formik<\n  Values extends FormikValues = FormikValues,\n  ExtraProps = {}\n>(props: FormikConfig<Values> & ExtraProps) {\n  const formikbag = useFormik<Values>(props);\n  const { component, children, render, innerRef } = props;\n\n  // This allows folks to pass a ref to <Formik />\n  React.useImperativeHandle(innerRef, () => formikbag);\n\n  if (__DEV__) {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useEffect(() => {\n      invariant(\n        !props.render,\n        `<Formik render> has been deprecated and will be removed in future versions of Formik. Please use a child callback function instead. To get rid of this warning, replace <Formik render={(props) => ...} /> with <Formik>{(props) => ...}</Formik>`\n      );\n      // eslint-disable-next-line\n    }, []);\n  }\n  return (\n    <FormikProvider value={formikbag}>\n      {component\n        ? React.createElement(component as any, formikbag)\n        : render\n        ? render(formikbag)\n        : children // children come last, always called\n        ? isFunction(children)\n          ? (children as (bag: FormikProps<Values>) => React.ReactNode)(\n              formikbag as FormikProps<Values>\n            )\n          : !isEmptyChildren(children)\n          ? React.Children.only(children)\n          : null\n        : null}\n    </FormikProvider>\n  );\n}\n\nfunction warnAboutMissingIdentifier({\n  htmlContent,\n  documentationAnchorLink,\n  handlerName,\n}: {\n  htmlContent: string;\n  documentationAnchorLink: string;\n  handlerName: string;\n}) {\n  console.warn(\n    `Warning: Formik called \\`${handlerName}\\`, but you forgot to pass an \\`id\\` or \\`name\\` attribute to your input:\n    ${htmlContent}\n    Formik cannot determine which value to update. For more info see https://formik.org/docs/api/formik#${documentationAnchorLink}\n  `\n  );\n}\n\n/**\n * Transform Yup ValidationError to a more usable object\n */\nexport function yupToFormErrors<Values>(yupError: any): FormikErrors<Values> {\n  let errors: FormikErrors<Values> = {};\n  if (yupError.inner) {\n    if (yupError.inner.length === 0) {\n      return setIn(errors, yupError.path, yupError.message);\n    }\n    for (let err of yupError.inner) {\n      if (!getIn(errors, err.path)) {\n        errors = setIn(errors, err.path, err.message);\n      }\n    }\n  }\n  return errors;\n}\n\n/**\n * Validate a yup schema.\n */\nexport function validateYupSchema<T extends FormikValues>(\n  values: T,\n  schema: any,\n  sync: boolean = false,\n  context?: any\n): Promise<Partial<T>> {\n  const normalizedValues: FormikValues = prepareDataForValidation(values);\n\n  return schema[sync ? 'validateSync' : 'validate'](normalizedValues, {\n    abortEarly: false,\n    context: context || normalizedValues,\n  });\n}\n\n/**\n * Recursively prepare values.\n */\nexport function prepareDataForValidation<T extends FormikValues>(\n  values: T\n): FormikValues {\n  let data: FormikValues = Array.isArray(values) ? [] : {};\n  for (let k in values) {\n    if (Object.prototype.hasOwnProperty.call(values, k)) {\n      const key = String(k);\n      if (Array.isArray(values[key]) === true) {\n        data[key] = values[key].map((value: any) => {\n          if (Array.isArray(value) === true || isPlainObject(value)) {\n            return prepareDataForValidation(value);\n          } else {\n            return value !== '' ? value : undefined;\n          }\n        });\n      } else if (isPlainObject(values[key])) {\n        data[key] = prepareDataForValidation(values[key]);\n      } else {\n        data[key] = values[key] !== '' ? values[key] : undefined;\n      }\n    }\n  }\n  return data;\n}\n\n/**\n * deepmerge array merging algorithm\n * https://github.com/KyleAMathews/deepmerge#combine-array\n */\nfunction arrayMerge(target: any[], source: any[], options: any): any[] {\n  const destination = target.slice();\n\n  source.forEach(function merge(e: any, i: number) {\n    if (typeof destination[i] === 'undefined') {\n      const cloneRequested = options.clone !== false;\n      const shouldClone = cloneRequested && options.isMergeableObject(e);\n      destination[i] = shouldClone\n        ? deepmerge(Array.isArray(e) ? [] : {}, e, options)\n        : e;\n    } else if (options.isMergeableObject(e)) {\n      destination[i] = deepmerge(target[i], e, options);\n    } else if (target.indexOf(e) === -1) {\n      destination.push(e);\n    }\n  });\n  return destination;\n}\n\n/** Return multi select values based on an array of options */\nfunction getSelectedValues(options: any[]) {\n  return Array.from(options)\n    .filter(el => el.selected)\n    .map(el => el.value);\n}\n\n/** Return the next value for a checkbox */\nfunction getValueForCheckbox(\n  currentValue: string | any[],\n  checked: boolean,\n  valueProp: any\n) {\n  // If the current value was a boolean, return a boolean\n  if (typeof currentValue === 'boolean') {\n    return Boolean(checked);\n  }\n\n  // If the currentValue was not a boolean we want to return an array\n  let currentArrayOfValues = [];\n  let isValueInArray = false;\n  let index = -1;\n\n  if (!Array.isArray(currentValue)) {\n    // eslint-disable-next-line eqeqeq\n    if (!valueProp || valueProp == 'true' || valueProp == 'false') {\n      return Boolean(checked);\n    }\n  } else {\n    // If the current value is already an array, use it\n    currentArrayOfValues = currentValue;\n    index = currentValue.indexOf(valueProp);\n    isValueInArray = index >= 0;\n  }\n\n  // If the checkbox was checked and the value is not already present in the aray we want to add the new value to the array of values\n  if (checked && valueProp && !isValueInArray) {\n    return currentArrayOfValues.concat(valueProp);\n  }\n\n  // If the checkbox was unchecked and the value is not in the array, simply return the already existing array of values\n  if (!isValueInArray) {\n    return currentArrayOfValues;\n  }\n\n  // If the checkbox was unchecked and the value is in the array, remove the value and return the array\n  return currentArrayOfValues\n    .slice(0, index)\n    .concat(currentArrayOfValues.slice(index + 1));\n}\n\n// React currently throws a warning when using useLayoutEffect on the server.\n// To get around it, we can conditionally useEffect on the server (no-op) and\n// useLayoutEffect in the browser.\n// @see https://gist.github.com/gaearon/e7d97cdf38a2907924ea12e4ebdf3c85\nconst useIsomorphicLayoutEffect =\n  typeof window !== 'undefined' &&\n  typeof window.document !== 'undefined' &&\n  typeof window.document.createElement !== 'undefined'\n    ? React.useLayoutEffect\n    : React.useEffect;\n\nfunction useEventCallback<T extends (...args: any[]) => any>(fn: T): T {\n  const ref: any = React.useRef(fn);\n\n  // we copy a ref to the callback scoped to the current state/props on each render\n  useIsomorphicLayoutEffect(() => {\n    ref.current = fn;\n  });\n\n  return React.useCallback(\n    (...args: any[]) => ref.current.apply(void 0, args),\n    []\n  ) as T;\n}\n","import * as React from 'react';\nimport {\n  FormikProps,\n  GenericFieldHTMLAttributes,\n  FieldMetaProps,\n  FieldHelperProps,\n  FieldInputProps,\n  FieldValidator,\n} from './types';\nimport { useFormikContext } from './FormikContext';\nimport { isFunction, isEmptyChildren, isObject } from './utils';\nimport invariant from 'tiny-warning';\n\nexport interface FieldProps<V = any, FormValues = any> {\n  field: FieldInputProps<V>;\n  form: FormikProps<FormValues>; // if ppl want to restrict this for a given form, let them.\n  meta: FieldMetaProps<V>;\n}\n\nexport interface FieldConfig<V = any> {\n  /**\n   * Field component to render. Can either be a string like 'select' or a component.\n   */\n  component?:\n  | string\n  | React.ComponentType<FieldProps<V>>\n  | React.ComponentType\n  | React.ForwardRefExoticComponent<any>;\n\n  /**\n   * Component to render. Can either be a string e.g. 'select', 'input', or 'textarea', or a component.\n   */\n  as?:\n  | React.ComponentType<FieldProps<V>['field']>\n  | string\n  | React.ComponentType\n  | React.ForwardRefExoticComponent<any>;\n\n  /**\n   * Render prop (works like React router's <Route render={props =>} />)\n   * @deprecated\n   */\n  render?: (props: FieldProps<V>) => React.ReactNode;\n\n  /**\n   * Children render function <Field name>{props => ...}</Field>)\n   */\n  children?: ((props: FieldProps<V>) => React.ReactNode) | React.ReactNode;\n\n  /**\n   * Validate a single field value independently\n   */\n  validate?: FieldValidator;\n\n  /**\n   * Used for 'select' and related input types.\n   */\n  multiple?: boolean;\n\n  /**\n   * Field name\n   */\n  name: string;\n\n  /** HTML input type */\n  type?: string;\n\n  /** Field value */\n  value?: any;\n\n  /** Inner ref */\n  innerRef?: (instance: any) => void;\n}\n\nexport type FieldAttributes<T> = { className?: string; } & GenericFieldHTMLAttributes &\n  FieldConfig<T> &\n  T & {\n    name: string,\n  };\n\nexport type FieldHookConfig<T> = GenericFieldHTMLAttributes & FieldConfig<T>;\n\nexport function useField<Val = any>(\n  propsOrFieldName: string | FieldHookConfig<Val>\n): [FieldInputProps<Val>, FieldMetaProps<Val>, FieldHelperProps<Val>] {\n  const formik = useFormikContext();\n  const {\n    getFieldProps,\n    getFieldMeta,\n    getFieldHelpers,\n    registerField,\n    unregisterField,\n  } = formik;\n\n  const isAnObject = isObject(propsOrFieldName);\n\n  // Normalize propsOrFieldName to FieldHookConfig<Val>\n  const props: FieldHookConfig<Val> = isAnObject\n    ? (propsOrFieldName as FieldHookConfig<Val>)\n    : { name: propsOrFieldName as string };\n\n  const { name: fieldName, validate: validateFn } = props;\n\n  React.useEffect(() => {\n    if (fieldName) {\n      registerField(fieldName, {\n        validate: validateFn,\n      });\n    }\n    return () => {\n      if (fieldName) {\n        unregisterField(fieldName);\n      }\n    };\n  }, [registerField, unregisterField, fieldName, validateFn]);\n\n  if (__DEV__) {\n    invariant(\n      formik,\n      'useField() / <Field /> must be used underneath a <Formik> component or withFormik() higher order component'\n    );\n  }\n\n  invariant(\n    fieldName,\n    'Invalid field name. Either pass `useField` a string or an object containing a `name` key.'\n  );\n\n  const fieldHelpers = React.useMemo(() => getFieldHelpers(fieldName), [\n    getFieldHelpers,\n    fieldName,\n  ]);\n\n  return [getFieldProps(props), getFieldMeta(fieldName), fieldHelpers];\n}\n\nexport function Field({\n  validate,\n  name,\n  render,\n  children,\n  as: is, // `as` is reserved in typescript lol\n  component,\n  className,\n  ...props\n}: FieldAttributes<any>) {\n  const {\n    validate: _validate,\n    validationSchema: _validationSchema,\n\n    ...formik\n  } = useFormikContext();\n\n  if (__DEV__) {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useEffect(() => {\n      invariant(\n        !render,\n        `<Field render> has been deprecated and will be removed in future versions of Formik. Please use a child callback function instead. To get rid of this warning, replace <Field name=\"${name}\" render={({field, form}) => ...} /> with <Field name=\"${name}\">{({field, form, meta}) => ...}</Field>`\n      );\n\n      invariant(\n        !(is && children && isFunction(children)),\n        'You should not use <Field as> and <Field children> as a function in the same <Field> component; <Field as> will be ignored.'\n      );\n\n      invariant(\n        !(component && children && isFunction(children)),\n        'You should not use <Field component> and <Field children> as a function in the same <Field> component; <Field component> will be ignored.'\n      );\n\n      invariant(\n        !(render && children && !isEmptyChildren(children)),\n        'You should not use <Field render> and <Field children> in the same <Field> component; <Field children> will be ignored'\n      );\n      // eslint-disable-next-line\n    }, []);\n  }\n\n  // Register field and field-level validation with parent <Formik>\n  const { registerField, unregisterField } = formik;\n  React.useEffect(() => {\n    registerField(name, {\n      validate: validate,\n    });\n    return () => {\n      unregisterField(name);\n    };\n  }, [registerField, unregisterField, name, validate]);\n  const field = formik.getFieldProps({ name, ...props });\n  const meta = formik.getFieldMeta(name);\n  const legacyBag = { field, form: formik };\n\n  if (render) {\n    return render({ ...legacyBag, meta });\n  }\n\n  if (isFunction(children)) {\n    return children({ ...legacyBag, meta });\n  }\n\n  if (component) {\n    // This behavior is backwards compat with earlier Formik 0.9 to 1.x\n    if (typeof component === 'string') {\n      const { innerRef, ...rest } = props;\n      return React.createElement(\n        component,\n        { ref: innerRef, ...field, ...rest, className },\n        children\n      );\n    }\n    // We don't pass `meta` for backwards compat\n    return React.createElement(\n      component,\n      { field, form: formik, ...props, className },\n      children\n    );\n  }\n\n  // default to input here so we can check for both `as` and `children` above\n  const asElement = is || 'input';\n\n  if (typeof asElement === 'string') {\n    const { innerRef, ...rest } = props;\n    return React.createElement(\n      asElement,\n      { ref: innerRef, ...field, ...rest, className },\n      children\n    );\n  }\n\n  return React.createElement(asElement, { ...field, ...props, className }, children);\n}\n","import * as React from 'react';\nimport { useFormikContext } from './FormikContext';\n\nexport type FormikFormProps = Pick<\n  React.FormHTMLAttributes<HTMLFormElement>,\n  Exclude<\n    keyof React.FormHTMLAttributes<HTMLFormElement>,\n    'onReset' | 'onSubmit'\n  >\n>;\n\ntype FormProps = React.ComponentPropsWithoutRef<'form'>;\n\n// @todo tests\nexport const Form = React.forwardRef<HTMLFormElement, FormProps>(\n  (props: FormikFormProps, ref) => {\n    // iOS needs an \"action\" attribute for nice input: https://stackoverflow.com/a/39485162/406725\n    // We default the action to \"#\" in case the preventDefault fails (just updates the URL hash)\n    const { action, ...rest } = props;\n    const _action = action ?? '#';\n    const { handleReset, handleSubmit } = useFormikContext();\n    return (\n      <form\n        onSubmit={handleSubmit}\n        ref={ref}\n        onReset={handleReset}\n        action={_action}\n        {...rest}\n      />\n    );\n  }\n);\n\nForm.displayName = 'Form';\n","import * as React from 'react';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\n\nimport { FormikContextType } from './types';\nimport { FormikConsumer } from './FormikContext';\nimport invariant from 'tiny-warning';\n\n/**\n * Connect any component to Formik context, and inject as a prop called `formik`;\n * @param Comp React Component\n */\nexport function connect<OuterProps, Values = {}>(\n  Comp: React.ComponentType<OuterProps & { formik: FormikContextType<Values> }>\n) {\n  const C: React.FC<OuterProps> = props => (\n    <FormikConsumer>\n      {formik => {\n        invariant(\n          !!formik,\n          `Formik context is undefined, please verify you are rendering <Form>, <Field>, <FastField>, <FieldArray>, or your custom context-using component as a child of a <Formik> component. Component name: ${Comp.name}`\n        );\n        return <Comp {...props} formik={formik} />;\n      }}\n    </FormikConsumer>\n  );\n\n  const componentDisplayName =\n    Comp.displayName ||\n    Comp.name ||\n    (Comp.constructor && Comp.constructor.name) ||\n    'Component';\n\n  // Assign Comp to C.WrappedComponent so we can access the inner component in tests\n  // For example, <Field.WrappedComponent /> gets us <FieldInner/>\n  (C as React.FC<OuterProps> & {\n    WrappedComponent: typeof Comp;\n  }).WrappedComponent = Comp;\n\n  C.displayName = `FormikConnect(${componentDisplayName})`;\n\n  return hoistNonReactStatics(\n    C,\n    Comp as React.ComponentClass<\n      OuterProps & { formik: FormikContextType<Values> }\n    > // cast type to ComponentClass (even if SFC)\n  );\n}\n","import cloneDeep from 'lodash/cloneDeep';\nimport * as React from 'react';\nimport isEqual from 'react-fast-compare';\nimport { connect } from './connect';\nimport {\n  FormikContextType,\n  FormikProps,\n  FormikState,\n  SharedRenderProps,\n} from './types';\nimport {\n  getIn,\n  isEmptyArray,\n  isEmptyChildren,\n  isFunction,\n  isObject,\n  setIn,\n} from './utils';\n\nexport type FieldArrayRenderProps = ArrayHelpers & {\n  form: FormikProps<any>;\n  name: string;\n};\n\nexport type FieldArrayConfig = {\n  /** Really the path to the array field to be updated */\n  name: string;\n  /** Should field array validate the form AFTER array updates/changes? */\n  validateOnChange?: boolean;\n} & SharedRenderProps<FieldArrayRenderProps>;\nexport interface ArrayHelpers<T extends any[] = any[]> {\n  /** Imperatively add a value to the end of an array */\n  push<X = T[number]>(obj: X): void;\n  /** Curried fn to add a value to the end of an array */\n  handlePush<X = T[number]>(obj: X): () => void;\n  /** Imperatively swap two values in an array */\n  swap: (indexA: number, indexB: number) => void;\n  /** Curried fn to swap two values in an array */\n  handleSwap: (indexA: number, indexB: number) => () => void;\n  /** Imperatively move an element in an array to another index */\n  move: (from: number, to: number) => void;\n  /** Imperatively move an element in an array to another index */\n  handleMove: (from: number, to: number) => () => void;\n  /** Imperatively insert an element at a given index into the array */\n  insert<X = T[number]>(index: number, value: X): void;\n  /** Curried fn to insert an element at a given index into the array */\n  handleInsert<X = T[number]>(index: number, value: X): () => void;\n  /** Imperatively replace a value at an index of an array  */\n  replace<X = T[number]>(index: number, value: X): void;\n  /** Curried fn to replace an element at a given index into the array */\n  handleReplace<X = T[number]>(index: number, value: X): () => void;\n  /** Imperatively add an element to the beginning of an array and return its length */\n  unshift<X = T[number]>(value: X): number;\n  /** Curried fn to add an element to the beginning of an array */\n  handleUnshift<X = T[number]>(value: X): () => void;\n  /** Curried fn to remove an element at an index of an array */\n  handleRemove: (index: number) => () => void;\n  /** Curried fn to remove a value from the end of the array */\n  handlePop: () => () => void;\n  /** Imperatively remove and element at an index of an array */\n  remove<X = T[number]>(index: number): X | undefined;\n  /** Imperatively remove and return value from the end of the array */\n  pop<X = T[number]>(): X | undefined;\n}\n\n/**\n * Some array helpers!\n */\nexport const move = <T,>(array: T[], from: number, to: number) => {\n  const copy = copyArrayLike(array);\n  const value = copy[from];\n  copy.splice(from, 1);\n  copy.splice(to, 0, value);\n  return copy;\n};\n\nexport const swap = <T,>(\n  arrayLike: ArrayLike<T>,\n  indexA: number,\n  indexB: number\n) => {\n  const copy = copyArrayLike(arrayLike);\n  const a = copy[indexA];\n  copy[indexA] = copy[indexB];\n  copy[indexB] = a;\n  return copy;\n};\n\nexport const insert = <T,>(\n  arrayLike: ArrayLike<T>,\n  index: number,\n  value: T\n) => {\n  const copy = copyArrayLike(arrayLike);\n  copy.splice(index, 0, value);\n  return copy;\n};\n\nexport const replace = <T,>(\n  arrayLike: ArrayLike<T>,\n  index: number,\n  value: T\n) => {\n  const copy = copyArrayLike(arrayLike);\n  copy[index] = value;\n  return copy;\n};\n\nconst copyArrayLike = (arrayLike: ArrayLike<any>) => {\n  if (!arrayLike) {\n    return [];\n  } else if (Array.isArray(arrayLike)) {\n    return [...arrayLike];\n  } else {\n    const maxIndex = Object.keys(arrayLike)\n      .map(key => parseInt(key))\n      .reduce((max, el) => (el > max ? el : max), 0);\n    return Array.from({ ...arrayLike, length: maxIndex + 1 });\n  }\n};\n\nconst createAlterationHandler = (\n  alteration: boolean | Function,\n  defaultFunction: Function\n) => {\n  const fn = typeof alteration === 'function' ? alteration : defaultFunction;\n\n  return (data: any | any[]) => {\n    if (Array.isArray(data) || isObject(data)) {\n      const clone = copyArrayLike(data);\n      return fn(clone);\n    }\n\n    // This can be assumed to be a primitive, which\n    // is a case for top level validation errors\n    return data;\n  };\n};\n\nclass FieldArrayInner<Values = {}> extends React.Component<\n  FieldArrayConfig & { formik: FormikContextType<Values> },\n  {}\n> {\n  static defaultProps = {\n    validateOnChange: true,\n  };\n\n  constructor(props: FieldArrayConfig & { formik: FormikContextType<Values> }) {\n    super(props);\n    // We need TypeScript generics on these, so we'll bind them in the constructor\n    // @todo Fix TS 3.2.1\n    this.remove = this.remove.bind(this) as any;\n    this.pop = this.pop.bind(this) as any;\n  }\n\n  componentDidUpdate(\n    prevProps: FieldArrayConfig & { formik: FormikContextType<Values> }\n  ) {\n    if (\n      this.props.validateOnChange &&\n      this.props.formik.validateOnChange &&\n      !isEqual(\n        getIn(prevProps.formik.values, prevProps.name),\n        getIn(this.props.formik.values, this.props.name)\n      )\n    ) {\n      this.props.formik.validateForm(this.props.formik.values);\n    }\n  }\n\n  updateArrayField = (\n    fn: Function,\n    alterTouched: boolean | Function,\n    alterErrors: boolean | Function\n  ) => {\n    const {\n      name,\n\n      formik: { setFormikState },\n    } = this.props;\n\n    setFormikState((prevState: FormikState<any>) => {\n      let updateErrors = createAlterationHandler(alterErrors, fn);\n      let updateTouched = createAlterationHandler(alterTouched, fn);\n\n      // values fn should be executed before updateErrors and updateTouched,\n      // otherwise it causes an error with unshift.\n      let values = setIn(\n        prevState.values,\n        name,\n        fn(getIn(prevState.values, name))\n      );\n\n      let fieldError = alterErrors\n        ? updateErrors(getIn(prevState.errors, name))\n        : undefined;\n      let fieldTouched = alterTouched\n        ? updateTouched(getIn(prevState.touched, name))\n        : undefined;\n\n      if (isEmptyArray(fieldError)) {\n        fieldError = undefined;\n      }\n      if (isEmptyArray(fieldTouched)) {\n        fieldTouched = undefined;\n      }\n\n      return {\n        ...prevState,\n        values,\n        errors: alterErrors\n          ? setIn(prevState.errors, name, fieldError)\n          : prevState.errors,\n        touched: alterTouched\n          ? setIn(prevState.touched, name, fieldTouched)\n          : prevState.touched,\n      };\n    });\n  };\n\n  push = (value: any) =>\n    this.updateArrayField(\n      (arrayLike: ArrayLike<any>) => [\n        ...copyArrayLike(arrayLike),\n        cloneDeep(value),\n      ],\n      false,\n      false\n    );\n\n  handlePush = (value: any) => () => this.push(value);\n\n  swap = (indexA: number, indexB: number) =>\n    this.updateArrayField(\n      (array: any[]) => swap(array, indexA, indexB),\n      true,\n      true\n    );\n\n  handleSwap = (indexA: number, indexB: number) => () =>\n    this.swap(indexA, indexB);\n\n  move = (from: number, to: number) =>\n    this.updateArrayField((array: any[]) => move(array, from, to), true, true);\n\n  handleMove = (from: number, to: number) => () => this.move(from, to);\n\n  insert = (index: number, value: any) =>\n    this.updateArrayField(\n      (array: any[]) => insert(array, index, value),\n      (array: any[]) => insert(array, index, null),\n      (array: any[]) => insert(array, index, null)\n    );\n\n  handleInsert = (index: number, value: any) => () => this.insert(index, value);\n\n  replace = (index: number, value: any) =>\n    this.updateArrayField(\n      (array: any[]) => replace(array, index, value),\n      false,\n      false\n    );\n\n  handleReplace = (index: number, value: any) => () =>\n    this.replace(index, value);\n\n  unshift = (value: any) => {\n    let length = -1;\n    this.updateArrayField(\n      (array: any[]) => {\n        const arr = array ? [value, ...array] : [value];\n\n        length = arr.length;\n\n        return arr;\n      },\n      (array: any[]) => {\n        return array ? [null, ...array] : [null];\n      },\n      (array: any[]) => {\n        return array ? [null, ...array] : [null];\n      }\n    );\n\n    return length;\n  };\n\n  handleUnshift = (value: any) => () => this.unshift(value);\n\n  remove<T>(index: number): T {\n    // We need to make sure we also remove relevant pieces of `touched` and `errors`\n    let result: any;\n    this.updateArrayField(\n      // so this gets call 3 times\n      (array?: any[]) => {\n        const copy = array ? copyArrayLike(array) : [];\n        if (!result) {\n          result = copy[index];\n        }\n        if (isFunction(copy.splice)) {\n          copy.splice(index, 1);\n        }\n        // if the array only includes undefined values we have to return an empty array\n        return isFunction(copy.every)\n          ? copy.every(v => v === undefined)\n            ? []\n            : copy\n          : copy;\n      },\n      true,\n      true\n    );\n\n    return result as T;\n  }\n\n  handleRemove = (index: number) => () => this.remove<any>(index);\n\n  pop<T>(): T {\n    // Remove relevant pieces of `touched` and `errors` too!\n    let result: any;\n    this.updateArrayField(\n      // so this gets call 3 times\n      (array: any[]) => {\n        const tmp = array.slice();\n        if (!result) {\n          result = tmp && tmp.pop && tmp.pop();\n        }\n        return tmp;\n      },\n      true,\n      true\n    );\n\n    return result as T;\n  }\n\n  handlePop = () => () => this.pop<any>();\n\n  render() {\n    const arrayHelpers: ArrayHelpers = {\n      push: this.push,\n      pop: this.pop,\n      swap: this.swap,\n      move: this.move,\n      insert: this.insert,\n      replace: this.replace,\n      unshift: this.unshift,\n      remove: this.remove,\n      handlePush: this.handlePush,\n      handlePop: this.handlePop,\n      handleSwap: this.handleSwap,\n      handleMove: this.handleMove,\n      handleInsert: this.handleInsert,\n      handleReplace: this.handleReplace,\n      handleUnshift: this.handleUnshift,\n      handleRemove: this.handleRemove,\n    };\n\n    const {\n      component,\n      render,\n      children,\n      name,\n      formik: {\n        validate: _validate,\n        validationSchema: _validationSchema,\n        ...restOfFormik\n      },\n    } = this.props;\n\n    const props: FieldArrayRenderProps = {\n      ...arrayHelpers,\n      form: restOfFormik,\n      name,\n    };\n\n    return component\n      ? React.createElement(component as any, props)\n      : render\n      ? (render as any)(props)\n      : children // children come last, always called\n      ? typeof children === 'function'\n        ? (children as any)(props)\n        : !isEmptyChildren(children)\n        ? React.Children.only(children)\n        : null\n      : null;\n  }\n}\n\nexport const FieldArray = connect<FieldArrayConfig, any>(FieldArrayInner);\n","import * as React from 'react';\nimport { FormikContextType } from './types';\nimport { getIn, isFunction } from './utils';\nimport { connect } from './connect';\n\nexport interface ErrorMessageProps {\n  id?: string;\n  name: string;\n  className?: string;\n  component?: string | React.ComponentType;\n  children?: (errorMessage: string) => React.ReactNode;\n  render?: (errorMessage: string) => React.ReactNode;\n}\n\nclass ErrorMessageImpl extends React.Component<\n  ErrorMessageProps & { formik: FormikContextType<any> }\n> {\n  shouldComponentUpdate(\n    props: ErrorMessageProps & { formik: FormikContextType<any> }\n  ) {\n    if (\n      getIn(this.props.formik.errors, this.props.name) !==\n        getIn(props.formik.errors, this.props.name) ||\n      getIn(this.props.formik.touched, this.props.name) !==\n        getIn(props.formik.touched, this.props.name) ||\n      Object.keys(this.props).length !== Object.keys(props).length\n    ) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  render() {\n    let { component, formik, render, children, name, ...rest } = this.props;\n\n    const touch = getIn(formik.touched, name);\n    const error = getIn(formik.errors, name);\n\n    return !!touch && !!error\n      ? render\n        ? isFunction(render)\n          ? render(error)\n          : null\n        : children\n        ? isFunction(children)\n          ? children(error)\n          : null\n        : component\n        ? React.createElement(component, rest as any, error)\n        : error\n      : null;\n  }\n}\n\nexport const ErrorMessage = connect<\n  ErrorMessageProps,\n  ErrorMessageProps & { formik: FormikContextType<any> }\n>(ErrorMessageImpl);\n","import * as React from 'react';\n\nimport {\n  FormikProps,\n  GenericFieldHTMLAttributes,\n  FormikContextType,\n  FieldMetaProps,\n  FieldInputProps,\n} from './types';\nimport invariant from 'tiny-warning';\nimport { getIn, isEmptyChildren, isFunction } from './utils';\nimport { FieldConfig } from './Field';\nimport { connect } from './connect';\n\ntype $FixMe = any;\n\nexport interface FastFieldProps<V = any> {\n  field: FieldInputProps<V>;\n  meta: FieldMetaProps<V>;\n  form: FormikProps<V>; // if ppl want to restrict this for a given form, let them.\n}\n\nexport type FastFieldConfig<T> = FieldConfig & {\n  /** Override FastField's default shouldComponentUpdate */\n  shouldUpdate?: (\n    nextProps: T & GenericFieldHTMLAttributes,\n    props: {}\n  ) => boolean;\n};\n\nexport type FastFieldAttributes<T> = GenericFieldHTMLAttributes &\n  FastFieldConfig<T> &\n  T;\n\ntype FastFieldInnerProps<Values = {}, Props = {}> = FastFieldAttributes<\n  Props\n> & { formik: FormikContextType<Values> };\n\n/**\n * Custom Field component for quickly hooking into Formik\n * context and wiring up forms.\n */\nclass FastFieldInner<Values = {}, Props = {}> extends React.Component<\n  FastFieldInnerProps<Values, Props>,\n  {}\n> {\n  constructor(props: FastFieldInnerProps<Values, Props>) {\n    super(props);\n    const { render, children, component, as: is, name } = props;\n    invariant(\n      !render,\n      `<FastField render> has been deprecated. Please use a child callback function instead: <FastField name={${name}}>{props => ...}</FastField> instead.`\n    );\n    invariant(\n      !(component && render),\n      'You should not use <FastField component> and <FastField render> in the same <FastField> component; <FastField component> will be ignored'\n    );\n\n    invariant(\n      !(is && children && isFunction(children)),\n      'You should not use <FastField as> and <FastField children> as a function in the same <FastField> component; <FastField as> will be ignored.'\n    );\n\n    invariant(\n      !(component && children && isFunction(children)),\n      'You should not use <FastField component> and <FastField children> as a function in the same <FastField> component; <FastField component> will be ignored.'\n    );\n\n    invariant(\n      !(render && children && !isEmptyChildren(children)),\n      'You should not use <FastField render> and <FastField children> in the same <FastField> component; <FastField children> will be ignored'\n    );\n  }\n\n  shouldComponentUpdate(props: FastFieldInnerProps<Values, Props>) {\n    if (this.props.shouldUpdate) {\n      return this.props.shouldUpdate(props, this.props);\n    } else if (\n      props.name !== this.props.name ||\n      getIn(props.formik.values, this.props.name) !==\n        getIn(this.props.formik.values, this.props.name) ||\n      getIn(props.formik.errors, this.props.name) !==\n        getIn(this.props.formik.errors, this.props.name) ||\n      getIn(props.formik.touched, this.props.name) !==\n        getIn(this.props.formik.touched, this.props.name) ||\n      Object.keys(this.props).length !== Object.keys(props).length ||\n      props.formik.isSubmitting !== this.props.formik.isSubmitting\n    ) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  componentDidMount() {\n    // Register the Field with the parent Formik. Parent will cycle through\n    // registered Field's validate fns right prior to submit\n    this.props.formik.registerField(this.props.name, {\n      validate: this.props.validate,\n    });\n  }\n\n  componentDidUpdate(prevProps: FastFieldAttributes<Props>) {\n    if (this.props.name !== prevProps.name) {\n      this.props.formik.unregisterField(prevProps.name);\n      this.props.formik.registerField(this.props.name, {\n        validate: this.props.validate,\n      });\n    }\n\n    if (this.props.validate !== prevProps.validate) {\n      this.props.formik.registerField(this.props.name, {\n        validate: this.props.validate,\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    this.props.formik.unregisterField(this.props.name);\n  }\n\n  render() {\n    const {\n      validate,\n      name,\n      render,\n      as: is,\n      children,\n      component,\n      shouldUpdate,\n      formik,\n      ...props\n    } = this.props as FastFieldInnerProps<Values, Props>;\n\n    const {\n      validate: _validate,\n      validationSchema: _validationSchema,\n      ...restOfFormik\n    } = formik;\n    const field = formik.getFieldProps({ name, ...props });\n    const meta = {\n      value: getIn(formik.values, name),\n      error: getIn(formik.errors, name),\n      touched: !!getIn(formik.touched, name),\n      initialValue: getIn(formik.initialValues, name),\n      initialTouched: !!getIn(formik.initialTouched, name),\n      initialError: getIn(formik.initialErrors, name),\n    };\n\n    const bag = { field, meta, form: restOfFormik };\n\n    if (render) {\n      return (render as any)(bag);\n    }\n\n    if (isFunction(children)) {\n      return (children as (props: FastFieldProps<any>) => React.ReactNode)(bag);\n    }\n\n    if (component) {\n      // This behavior is backwards compat with earlier Formik 0.9 to 1.x\n      if (typeof component === 'string') {\n        const { innerRef, ...rest } = props;\n        return React.createElement(\n          component,\n          { ref: innerRef, ...field, ...(rest as $FixMe) },\n          children\n        );\n      }\n      // We don't pass `meta` for backwards compat\n      return React.createElement(\n        component as React.ComponentClass<$FixMe>,\n        { field, form: formik, ...props },\n        children\n      );\n    }\n\n    // default to input here so we can check for both `as` and `children` above\n    const asElement = is || 'input';\n\n    if (typeof asElement === 'string') {\n      const { innerRef, ...rest } = props;\n      return React.createElement(\n        asElement,\n        { ref: innerRef, ...field, ...(rest as $FixMe) },\n        children\n      );\n    }\n\n    return React.createElement(\n      asElement as React.ComponentClass,\n      { ...field, ...props },\n      children\n    );\n  }\n}\n\nexport const FastField = connect<FastFieldAttributes<any>, any>(FastFieldInner);\n"],"sourceRoot":""}